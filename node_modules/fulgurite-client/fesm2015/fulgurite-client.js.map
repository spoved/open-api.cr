{"version":3,"file":"fulgurite-client.js","sources":["ng://fulgurite-client/encoder.ts","ng://fulgurite-client/variables.ts","ng://fulgurite-client/configuration.ts","ng://fulgurite-client/api/default.service.ts","ng://fulgurite-client/api/api.ts","ng://fulgurite-client/api.module.ts","ng://fulgurite-client/fulgurite-client.ts"],"sourcesContent":["    import { HttpUrlEncodingCodec } from '@angular/common/http';\n\n/**\n* CustomHttpUrlEncodingCodec\n* Fix plus sign (+) not encoding, so sent as blank space\n* See: https://github.com/angular/angular/issues/11058#issuecomment-247367318\n*/\nexport class CustomHttpUrlEncodingCodec extends HttpUrlEncodingCodec {\n    encodeKey(k: string): string {\n        k = super.encodeKey(k);\n        return k.replace(/\\+/gi, '%2B');\n    }\n    encodeValue(v: string): string {\n        v = super.encodeValue(v);\n        return v.replace(/\\+/gi, '%2B');\n    }\n}\n\n","import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","export interface ConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n}\n\nexport class Configuration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length == 0) {\n            return undefined;\n        }\n\n        let type = contentTypes.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length == 0) {\n            return undefined;\n        }\n\n        let type = accepts.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime != null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","/**\n * Fulgurite API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { FulguriteModelBinaryChunkList } from '../model/fulguriteModelBinaryChunkList';\nimport { FulguriteModelBinaryList } from '../model/fulguriteModelBinaryList';\nimport { FulguriteModelBinaryPartList } from '../model/fulguriteModelBinaryPartList';\nimport { FulguriteModelJobList } from '../model/fulguriteModelJobList';\nimport { FulguriteModelMatchErrorList } from '../model/fulguriteModelMatchErrorList';\nimport { FulguriteModelNzbList } from '../model/fulguriteModelNzbList';\nimport { FulguriteUsenetGroupList } from '../model/fulguriteUsenetGroupList';\nimport { FulguriteUsenetProviderList } from '../model/fulguriteUsenetProviderList';\nimport { InlineResponse200 } from '../model/inlineResponse200';\nimport { InlineResponse2001 } from '../model/inlineResponse2001';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class DefaultService {\n\n    protected basePath = '/';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * get Fulgurite::Model::Nzb\n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1DownloadNzbIdGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1DownloadNzbIdGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1DownloadNzbIdGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1DownloadNzbIdGet(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiV1DownloadNzbIdGet.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('get',`${this.basePath}/api/v1/download/nzb/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * get Fulgurite::Model::Job list\n     * \n     * @param limit \n     * @param offset \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1JobGet(limit?: string, offset?: string, observe?: 'body', reportProgress?: boolean): Observable<FulguriteModelJobList>;\n    public apiV1JobGet(limit?: string, offset?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FulguriteModelJobList>>;\n    public apiV1JobGet(limit?: string, offset?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FulguriteModelJobList>>;\n    public apiV1JobGet(limit?: string, offset?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (limit !== undefined && limit !== null) {\n            queryParameters = queryParameters.set('limit', <any>limit);\n        }\n        if (offset !== undefined && offset !== null) {\n            queryParameters = queryParameters.set('offset', <any>offset);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<FulguriteModelJobList>('get',`${this.basePath}/api/v1/job`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * delete Fulgurite::Model::Job\n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1JobIdDelete(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1JobIdDelete(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1JobIdDelete(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1JobIdDelete(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiV1JobIdDelete.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/api/v1/job/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * get Fulgurite::Model::Job\n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1JobIdGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1JobIdGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1JobIdGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1JobIdGet(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiV1JobIdGet.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('get',`${this.basePath}/api/v1/job/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * put Fulgurite::Model::Job\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1JobPut(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1JobPut(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1JobPut(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1JobPut(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('put',`${this.basePath}/api/v1/job`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * get Fulgurite::Model::MatchError list\n     * \n     * @param limit \n     * @param offset \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1ReleaseMatchErrorGet(limit?: string, offset?: string, observe?: 'body', reportProgress?: boolean): Observable<FulguriteModelMatchErrorList>;\n    public apiV1ReleaseMatchErrorGet(limit?: string, offset?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FulguriteModelMatchErrorList>>;\n    public apiV1ReleaseMatchErrorGet(limit?: string, offset?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FulguriteModelMatchErrorList>>;\n    public apiV1ReleaseMatchErrorGet(limit?: string, offset?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (limit !== undefined && limit !== null) {\n            queryParameters = queryParameters.set('limit', <any>limit);\n        }\n        if (offset !== undefined && offset !== null) {\n            queryParameters = queryParameters.set('offset', <any>offset);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<FulguriteModelMatchErrorList>('get',`${this.basePath}/api/v1/release/match_error`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * delete Fulgurite::Model::MatchError\n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1ReleaseMatchErrorIdDelete(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1ReleaseMatchErrorIdDelete(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1ReleaseMatchErrorIdDelete(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1ReleaseMatchErrorIdDelete(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiV1ReleaseMatchErrorIdDelete.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/api/v1/release/match_error/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * get Fulgurite::Model::MatchError\n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1ReleaseMatchErrorIdGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1ReleaseMatchErrorIdGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1ReleaseMatchErrorIdGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1ReleaseMatchErrorIdGet(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiV1ReleaseMatchErrorIdGet.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('get',`${this.basePath}/api/v1/release/match_error/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * put Fulgurite::Model::MatchError\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1ReleaseMatchErrorPut(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1ReleaseMatchErrorPut(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1ReleaseMatchErrorPut(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1ReleaseMatchErrorPut(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('put',`${this.basePath}/api/v1/release/match_error`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * get Fulgurite::Model::Nzb list\n     * \n     * @param limit \n     * @param offset \n     * @param name \n     * @param name_like \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1ReleaseNzbGet(limit?: string, offset?: string, name?: string, name_like?: string, observe?: 'body', reportProgress?: boolean): Observable<FulguriteModelNzbList>;\n    public apiV1ReleaseNzbGet(limit?: string, offset?: string, name?: string, name_like?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FulguriteModelNzbList>>;\n    public apiV1ReleaseNzbGet(limit?: string, offset?: string, name?: string, name_like?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FulguriteModelNzbList>>;\n    public apiV1ReleaseNzbGet(limit?: string, offset?: string, name?: string, name_like?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (limit !== undefined && limit !== null) {\n            queryParameters = queryParameters.set('limit', <any>limit);\n        }\n        if (offset !== undefined && offset !== null) {\n            queryParameters = queryParameters.set('offset', <any>offset);\n        }\n        if (name !== undefined && name !== null) {\n            queryParameters = queryParameters.set('name', <any>name);\n        }\n        if (name_like !== undefined && name_like !== null) {\n            queryParameters = queryParameters.set('name_like', <any>name_like);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<FulguriteModelNzbList>('get',`${this.basePath}/api/v1/release/nzb`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * delete Fulgurite::Model::Nzb\n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1ReleaseNzbIdDelete(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1ReleaseNzbIdDelete(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1ReleaseNzbIdDelete(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1ReleaseNzbIdDelete(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiV1ReleaseNzbIdDelete.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/api/v1/release/nzb/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * get Fulgurite::Model::Nzb\n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1ReleaseNzbIdGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1ReleaseNzbIdGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1ReleaseNzbIdGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1ReleaseNzbIdGet(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiV1ReleaseNzbIdGet.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('get',`${this.basePath}/api/v1/release/nzb/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * get Fulgurite::Model::Nzb\n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1ReleaseNzbIdRawGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1ReleaseNzbIdRawGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1ReleaseNzbIdRawGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1ReleaseNzbIdRawGet(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiV1ReleaseNzbIdRawGet.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('get',`${this.basePath}/api/v1/release/nzb/${encodeURIComponent(String(id))}/raw`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * put Fulgurite::Model::Nzb\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1ReleaseNzbPut(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1ReleaseNzbPut(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1ReleaseNzbPut(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1ReleaseNzbPut(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('put',`${this.basePath}/api/v1/release/nzb`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * get Fulgurite::Model::BinaryChunk list\n     * \n     * @param limit \n     * @param offset \n     * @param uuid \n     * @param usenet_binary_part_uuid \n     * @param usenet_group_uuid \n     * @param num \n     * @param message_id \n     * @param chunk \n     * @param poster \n     * @param subject \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1UsenetBinaryChunkGet(limit?: string, offset?: string, uuid?: string, usenet_binary_part_uuid?: string, usenet_group_uuid?: string, num?: string, message_id?: string, chunk?: string, poster?: string, subject?: string, observe?: 'body', reportProgress?: boolean): Observable<FulguriteModelBinaryChunkList>;\n    public apiV1UsenetBinaryChunkGet(limit?: string, offset?: string, uuid?: string, usenet_binary_part_uuid?: string, usenet_group_uuid?: string, num?: string, message_id?: string, chunk?: string, poster?: string, subject?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FulguriteModelBinaryChunkList>>;\n    public apiV1UsenetBinaryChunkGet(limit?: string, offset?: string, uuid?: string, usenet_binary_part_uuid?: string, usenet_group_uuid?: string, num?: string, message_id?: string, chunk?: string, poster?: string, subject?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FulguriteModelBinaryChunkList>>;\n    public apiV1UsenetBinaryChunkGet(limit?: string, offset?: string, uuid?: string, usenet_binary_part_uuid?: string, usenet_group_uuid?: string, num?: string, message_id?: string, chunk?: string, poster?: string, subject?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n\n\n\n\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (limit !== undefined && limit !== null) {\n            queryParameters = queryParameters.set('limit', <any>limit);\n        }\n        if (offset !== undefined && offset !== null) {\n            queryParameters = queryParameters.set('offset', <any>offset);\n        }\n        if (uuid !== undefined && uuid !== null) {\n            queryParameters = queryParameters.set('uuid', <any>uuid);\n        }\n        if (usenet_binary_part_uuid !== undefined && usenet_binary_part_uuid !== null) {\n            queryParameters = queryParameters.set('usenet_binary_part_uuid', <any>usenet_binary_part_uuid);\n        }\n        if (usenet_group_uuid !== undefined && usenet_group_uuid !== null) {\n            queryParameters = queryParameters.set('usenet_group_uuid', <any>usenet_group_uuid);\n        }\n        if (num !== undefined && num !== null) {\n            queryParameters = queryParameters.set('num', <any>num);\n        }\n        if (message_id !== undefined && message_id !== null) {\n            queryParameters = queryParameters.set('message_id', <any>message_id);\n        }\n        if (chunk !== undefined && chunk !== null) {\n            queryParameters = queryParameters.set('chunk', <any>chunk);\n        }\n        if (poster !== undefined && poster !== null) {\n            queryParameters = queryParameters.set('poster', <any>poster);\n        }\n        if (subject !== undefined && subject !== null) {\n            queryParameters = queryParameters.set('subject', <any>subject);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<FulguriteModelBinaryChunkList>('get',`${this.basePath}/api/v1/usenet/binary/chunk`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * delete Fulgurite::Model::BinaryChunk\n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1UsenetBinaryChunkIdDelete(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1UsenetBinaryChunkIdDelete(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1UsenetBinaryChunkIdDelete(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1UsenetBinaryChunkIdDelete(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiV1UsenetBinaryChunkIdDelete.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/api/v1/usenet/binary/chunk/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * get Fulgurite::Model::BinaryChunk\n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1UsenetBinaryChunkIdGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1UsenetBinaryChunkIdGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1UsenetBinaryChunkIdGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1UsenetBinaryChunkIdGet(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiV1UsenetBinaryChunkIdGet.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('get',`${this.basePath}/api/v1/usenet/binary/chunk/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * put Fulgurite::Model::BinaryChunk\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1UsenetBinaryChunkPut(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1UsenetBinaryChunkPut(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1UsenetBinaryChunkPut(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1UsenetBinaryChunkPut(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('put',`${this.basePath}/api/v1/usenet/binary/chunk`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * get Fulgurite::Model::Binary list\n     * \n     * @param limit \n     * @param offset \n     * @param uuid \n     * @param name \n     * @param name_like \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1UsenetBinaryGet(limit?: string, offset?: string, uuid?: string, name?: string, name_like?: string, observe?: 'body', reportProgress?: boolean): Observable<FulguriteModelBinaryList>;\n    public apiV1UsenetBinaryGet(limit?: string, offset?: string, uuid?: string, name?: string, name_like?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FulguriteModelBinaryList>>;\n    public apiV1UsenetBinaryGet(limit?: string, offset?: string, uuid?: string, name?: string, name_like?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FulguriteModelBinaryList>>;\n    public apiV1UsenetBinaryGet(limit?: string, offset?: string, uuid?: string, name?: string, name_like?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (limit !== undefined && limit !== null) {\n            queryParameters = queryParameters.set('limit', <any>limit);\n        }\n        if (offset !== undefined && offset !== null) {\n            queryParameters = queryParameters.set('offset', <any>offset);\n        }\n        if (uuid !== undefined && uuid !== null) {\n            queryParameters = queryParameters.set('uuid', <any>uuid);\n        }\n        if (name !== undefined && name !== null) {\n            queryParameters = queryParameters.set('name', <any>name);\n        }\n        if (name_like !== undefined && name_like !== null) {\n            queryParameters = queryParameters.set('name_like', <any>name_like);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<FulguriteModelBinaryList>('get',`${this.basePath}/api/v1/usenet/binary`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * delete Fulgurite::Model::Binary\n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1UsenetBinaryIdDelete(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1UsenetBinaryIdDelete(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1UsenetBinaryIdDelete(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1UsenetBinaryIdDelete(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiV1UsenetBinaryIdDelete.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/api/v1/usenet/binary/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * get Fulgurite::Model::Binary\n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1UsenetBinaryIdGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1UsenetBinaryIdGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1UsenetBinaryIdGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1UsenetBinaryIdGet(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiV1UsenetBinaryIdGet.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('get',`${this.basePath}/api/v1/usenet/binary/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * get Fulgurite::Model::BinaryPart list\n     * \n     * @param id \n     * @param limit \n     * @param offset \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1UsenetBinaryIdPartsGet(id: string, limit?: string, offset?: string, observe?: 'body', reportProgress?: boolean): Observable<FulguriteModelBinaryPartList>;\n    public apiV1UsenetBinaryIdPartsGet(id: string, limit?: string, offset?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FulguriteModelBinaryPartList>>;\n    public apiV1UsenetBinaryIdPartsGet(id: string, limit?: string, offset?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FulguriteModelBinaryPartList>>;\n    public apiV1UsenetBinaryIdPartsGet(id: string, limit?: string, offset?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiV1UsenetBinaryIdPartsGet.');\n        }\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (limit !== undefined && limit !== null) {\n            queryParameters = queryParameters.set('limit', <any>limit);\n        }\n        if (offset !== undefined && offset !== null) {\n            queryParameters = queryParameters.set('offset', <any>offset);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<FulguriteModelBinaryPartList>('get',`${this.basePath}/api/v1/usenet/binary/${encodeURIComponent(String(id))}/parts`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * get Fulgurite::Model::BinaryPart list\n     * \n     * @param limit \n     * @param offset \n     * @param uuid \n     * @param usenet_binary_uuid \n     * @param file \n     * @param file_like \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1UsenetBinaryPartGet(limit?: string, offset?: string, uuid?: string, usenet_binary_uuid?: string, file?: string, file_like?: string, observe?: 'body', reportProgress?: boolean): Observable<FulguriteModelBinaryPartList>;\n    public apiV1UsenetBinaryPartGet(limit?: string, offset?: string, uuid?: string, usenet_binary_uuid?: string, file?: string, file_like?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FulguriteModelBinaryPartList>>;\n    public apiV1UsenetBinaryPartGet(limit?: string, offset?: string, uuid?: string, usenet_binary_uuid?: string, file?: string, file_like?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FulguriteModelBinaryPartList>>;\n    public apiV1UsenetBinaryPartGet(limit?: string, offset?: string, uuid?: string, usenet_binary_uuid?: string, file?: string, file_like?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (limit !== undefined && limit !== null) {\n            queryParameters = queryParameters.set('limit', <any>limit);\n        }\n        if (offset !== undefined && offset !== null) {\n            queryParameters = queryParameters.set('offset', <any>offset);\n        }\n        if (uuid !== undefined && uuid !== null) {\n            queryParameters = queryParameters.set('uuid', <any>uuid);\n        }\n        if (usenet_binary_uuid !== undefined && usenet_binary_uuid !== null) {\n            queryParameters = queryParameters.set('usenet_binary_uuid', <any>usenet_binary_uuid);\n        }\n        if (file !== undefined && file !== null) {\n            queryParameters = queryParameters.set('file', <any>file);\n        }\n        if (file_like !== undefined && file_like !== null) {\n            queryParameters = queryParameters.set('file_like', <any>file_like);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<FulguriteModelBinaryPartList>('get',`${this.basePath}/api/v1/usenet/binary/part`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * get Fulgurite::Model::BinaryChunk list\n     * \n     * @param id \n     * @param limit \n     * @param offset \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1UsenetBinaryPartIdChunksGet(id: string, limit?: string, offset?: string, observe?: 'body', reportProgress?: boolean): Observable<FulguriteModelBinaryChunkList>;\n    public apiV1UsenetBinaryPartIdChunksGet(id: string, limit?: string, offset?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FulguriteModelBinaryChunkList>>;\n    public apiV1UsenetBinaryPartIdChunksGet(id: string, limit?: string, offset?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FulguriteModelBinaryChunkList>>;\n    public apiV1UsenetBinaryPartIdChunksGet(id: string, limit?: string, offset?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiV1UsenetBinaryPartIdChunksGet.');\n        }\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (limit !== undefined && limit !== null) {\n            queryParameters = queryParameters.set('limit', <any>limit);\n        }\n        if (offset !== undefined && offset !== null) {\n            queryParameters = queryParameters.set('offset', <any>offset);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<FulguriteModelBinaryChunkList>('get',`${this.basePath}/api/v1/usenet/binary/part/${encodeURIComponent(String(id))}/chunks`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * delete Fulgurite::Model::BinaryPart\n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1UsenetBinaryPartIdDelete(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1UsenetBinaryPartIdDelete(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1UsenetBinaryPartIdDelete(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1UsenetBinaryPartIdDelete(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiV1UsenetBinaryPartIdDelete.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/api/v1/usenet/binary/part/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * get Fulgurite::Model::BinaryPart\n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1UsenetBinaryPartIdGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1UsenetBinaryPartIdGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1UsenetBinaryPartIdGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1UsenetBinaryPartIdGet(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiV1UsenetBinaryPartIdGet.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('get',`${this.basePath}/api/v1/usenet/binary/part/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * put Fulgurite::Model::BinaryPart\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1UsenetBinaryPartPut(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1UsenetBinaryPartPut(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1UsenetBinaryPartPut(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1UsenetBinaryPartPut(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('put',`${this.basePath}/api/v1/usenet/binary/part`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * put Fulgurite::Model::Binary\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1UsenetBinaryPut(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1UsenetBinaryPut(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1UsenetBinaryPut(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1UsenetBinaryPut(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('put',`${this.basePath}/api/v1/usenet/binary`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * get Fulgurite::Usenet::Group list\n     * \n     * @param limit \n     * @param offset \n     * @param uuid \n     * @param usenet_provider_uuid \n     * @param name \n     * @param name_like \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1UsenetGroupGet(limit?: string, offset?: string, uuid?: string, usenet_provider_uuid?: string, name?: string, name_like?: string, observe?: 'body', reportProgress?: boolean): Observable<FulguriteUsenetGroupList>;\n    public apiV1UsenetGroupGet(limit?: string, offset?: string, uuid?: string, usenet_provider_uuid?: string, name?: string, name_like?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FulguriteUsenetGroupList>>;\n    public apiV1UsenetGroupGet(limit?: string, offset?: string, uuid?: string, usenet_provider_uuid?: string, name?: string, name_like?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FulguriteUsenetGroupList>>;\n    public apiV1UsenetGroupGet(limit?: string, offset?: string, uuid?: string, usenet_provider_uuid?: string, name?: string, name_like?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (limit !== undefined && limit !== null) {\n            queryParameters = queryParameters.set('limit', <any>limit);\n        }\n        if (offset !== undefined && offset !== null) {\n            queryParameters = queryParameters.set('offset', <any>offset);\n        }\n        if (uuid !== undefined && uuid !== null) {\n            queryParameters = queryParameters.set('uuid', <any>uuid);\n        }\n        if (usenet_provider_uuid !== undefined && usenet_provider_uuid !== null) {\n            queryParameters = queryParameters.set('usenet_provider_uuid', <any>usenet_provider_uuid);\n        }\n        if (name !== undefined && name !== null) {\n            queryParameters = queryParameters.set('name', <any>name);\n        }\n        if (name_like !== undefined && name_like !== null) {\n            queryParameters = queryParameters.set('name_like', <any>name_like);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<FulguriteUsenetGroupList>('get',`${this.basePath}/api/v1/usenet/group`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * delete Fulgurite::Usenet::Group\n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1UsenetGroupIdDelete(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1UsenetGroupIdDelete(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1UsenetGroupIdDelete(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1UsenetGroupIdDelete(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiV1UsenetGroupIdDelete.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/api/v1/usenet/group/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * get Fulgurite::Usenet::Group\n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1UsenetGroupIdGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1UsenetGroupIdGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1UsenetGroupIdGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1UsenetGroupIdGet(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiV1UsenetGroupIdGet.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('get',`${this.basePath}/api/v1/usenet/group/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * put Fulgurite::Usenet::Group\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1UsenetGroupPut(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1UsenetGroupPut(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1UsenetGroupPut(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1UsenetGroupPut(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('put',`${this.basePath}/api/v1/usenet/group`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * get Fulgurite::Usenet::Provider list\n     * \n     * @param limit \n     * @param offset \n     * @param uuid \n     * @param name \n     * @param name_like \n     * @param active \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1UsenetProviderGet(limit?: string, offset?: string, uuid?: string, name?: string, name_like?: string, active?: string, observe?: 'body', reportProgress?: boolean): Observable<FulguriteUsenetProviderList>;\n    public apiV1UsenetProviderGet(limit?: string, offset?: string, uuid?: string, name?: string, name_like?: string, active?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FulguriteUsenetProviderList>>;\n    public apiV1UsenetProviderGet(limit?: string, offset?: string, uuid?: string, name?: string, name_like?: string, active?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FulguriteUsenetProviderList>>;\n    public apiV1UsenetProviderGet(limit?: string, offset?: string, uuid?: string, name?: string, name_like?: string, active?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (limit !== undefined && limit !== null) {\n            queryParameters = queryParameters.set('limit', <any>limit);\n        }\n        if (offset !== undefined && offset !== null) {\n            queryParameters = queryParameters.set('offset', <any>offset);\n        }\n        if (uuid !== undefined && uuid !== null) {\n            queryParameters = queryParameters.set('uuid', <any>uuid);\n        }\n        if (name !== undefined && name !== null) {\n            queryParameters = queryParameters.set('name', <any>name);\n        }\n        if (name_like !== undefined && name_like !== null) {\n            queryParameters = queryParameters.set('name_like', <any>name_like);\n        }\n        if (active !== undefined && active !== null) {\n            queryParameters = queryParameters.set('active', <any>active);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<FulguriteUsenetProviderList>('get',`${this.basePath}/api/v1/usenet/provider`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * delete Fulgurite::Usenet::Provider\n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1UsenetProviderIdDelete(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1UsenetProviderIdDelete(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1UsenetProviderIdDelete(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1UsenetProviderIdDelete(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiV1UsenetProviderIdDelete.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/api/v1/usenet/provider/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * get Fulgurite::Usenet::Provider\n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1UsenetProviderIdGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1UsenetProviderIdGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1UsenetProviderIdGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1UsenetProviderIdGet(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiV1UsenetProviderIdGet.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('get',`${this.basePath}/api/v1/usenet/provider/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * put Fulgurite::Usenet::Provider\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1UsenetProviderPut(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1UsenetProviderPut(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1UsenetProviderPut(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1UsenetProviderPut(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('put',`${this.basePath}/api/v1/usenet/provider`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * get nil\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public healthzGet(observe?: 'body', reportProgress?: boolean): Observable<InlineResponse200>;\n    public healthzGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse200>>;\n    public healthzGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse200>>;\n    public healthzGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<InlineResponse200>('get',`${this.basePath}/healthz`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * options nil\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public options(observe?: 'body', reportProgress?: boolean): Observable<InlineResponse2001>;\n    public options(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse2001>>;\n    public options(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse2001>>;\n    public options(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<InlineResponse2001>('options',`${this.basePath}/*`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","export * from './default.service';\nimport { DefaultService } from './default.service';\nexport const APIS = [DefaultService];\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { Configuration } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\n\nimport { DefaultService } from './api/default.service';\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers: [\n    DefaultService ]\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\n                 @Optional() http: HttpClient) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["tslib_1.__param"],"mappings":";;;;AAEA;;;;;AAKA,MAAa,0BAA2B,SAAQ,oBAAoB;IAChE,SAAS,CAAC,CAAS;QACf,CAAC,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QACvB,OAAO,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;KACnC;IACD,WAAW,CAAC,CAAS;QACjB,CAAC,GAAG,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QACzB,OAAO,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;KACnC;CACJ;;MCdY,SAAS,GAAG,IAAI,cAAc,CAAS,UAAU,CAAC,CAAC;AAChE,MAAa,kBAAkB,GAAG;IAC9B,KAAK,EAAE,GAAG;IACV,KAAK,EAAE,KAAK;IACZ,KAAK,EAAE,GAAG;IACV,OAAO,EAAE,GAAG;CACf;;MCCY,aAAa;IAQtB,YAAY,0BAAmD,EAAE;QAC7D,IAAI,CAAC,OAAO,GAAG,uBAAuB,CAAC,OAAO,CAAC;QAC/C,IAAI,CAAC,QAAQ,GAAG,uBAAuB,CAAC,QAAQ,CAAC;QACjD,IAAI,CAAC,QAAQ,GAAG,uBAAuB,CAAC,QAAQ,CAAC;QACjD,IAAI,CAAC,WAAW,GAAG,uBAAuB,CAAC,WAAW,CAAC;QACvD,IAAI,CAAC,QAAQ,GAAG,uBAAuB,CAAC,QAAQ,CAAC;QACjD,IAAI,CAAC,eAAe,GAAG,uBAAuB,CAAC,eAAe,CAAC;KAClE;;;;;;;;IASM,uBAAuB,CAAE,YAAsB;QAClD,IAAI,YAAY,CAAC,MAAM,IAAI,CAAC,EAAE;YAC1B,OAAO,SAAS,CAAC;SACpB;QAED,IAAI,IAAI,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;QACtD,IAAI,IAAI,KAAK,SAAS,EAAE;YACpB,OAAO,YAAY,CAAC,CAAC,CAAC,CAAC;SAC1B;QACD,OAAO,IAAI,CAAC;KACf;;;;;;;;IASM,kBAAkB,CAAC,OAAiB;QACvC,IAAI,OAAO,CAAC,MAAM,IAAI,CAAC,EAAE;YACrB,OAAO,SAAS,CAAC;SACpB;QAED,IAAI,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;QACjD,IAAI,IAAI,KAAK,SAAS,EAAE;YACpB,OAAO,OAAO,CAAC,CAAC,CAAC,CAAC;SACrB;QACD,OAAO,IAAI,CAAC;KACf;;;;;;;;;;;IAYM,UAAU,CAAC,IAAY;QAC1B,MAAM,QAAQ,GAAW,IAAI,MAAM,CAAC,+DAA+D,EAAE,GAAG,CAAC,CAAC;QAC1G,OAAO,IAAI,IAAI,IAAI,KAAK,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,WAAW,EAAE,KAAK,6BAA6B,CAAC,CAAC;KACxG;CACJ;;AC9ED;;;;;;;;;;;IAmCa,cAAc,GAA3B,MAAa,cAAc;IAMvB,YAAsB,UAAsB,EAAgC,QAAgB,EAAc,aAA4B;QAAhH,eAAU,GAAV,UAAU,CAAY;QAJlC,aAAQ,GAAG,GAAG,CAAC;QAClB,mBAAc,GAAG,IAAI,WAAW,EAAE,CAAC;QACnC,kBAAa,GAAG,IAAI,aAAa,EAAE,CAAC;QAGvC,IAAI,QAAQ,EAAE;YACV,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC5B;QACD,IAAI,aAAa,EAAE;YACf,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;YACnC,IAAI,CAAC,QAAQ,GAAG,QAAQ,IAAI,aAAa,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC;SACvE;KACJ;;;;;IAMO,cAAc,CAAC,QAAkB;QACrC,MAAM,IAAI,GAAG,qBAAqB,CAAC;QACnC,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE;YAC5B,IAAI,IAAI,KAAK,OAAO,EAAE;gBAClB,OAAO,IAAI,CAAC;aACf;SACJ;QACD,OAAO,KAAK,CAAC;KAChB;IAaM,qBAAqB,CAAC,EAAU,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK;QAE3F,IAAI,EAAE,KAAK,IAAI,IAAI,EAAE,KAAK,SAAS,EAAE;YACjC,MAAM,IAAI,KAAK,CAAC,iFAAiF,CAAC,CAAC;SACtG;QAED,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;;QAGlC,IAAI,iBAAiB,GAAa;YAC9B,kBAAkB;SACrB,CAAC;QACF,MAAM,wBAAwB,GAAuB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC9G,IAAI,wBAAwB,IAAI,SAAS,EAAE;YACvC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;SAC7D;;QAGD,MAAM,QAAQ,GAAa,EAC1B,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAM,KAAK,EAAC,GAAG,IAAI,CAAC,QAAQ,wBAAwB,kBAAkB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,EAC9G;YACI,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAaM,WAAW,CAAC,KAAc,EAAE,MAAe,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK;QAItG,IAAI,eAAe,GAAG,IAAI,UAAU,CAAC,EAAC,OAAO,EAAE,IAAI,0BAA0B,EAAE,EAAC,CAAC,CAAC;QAClF,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,EAAE;YACvC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,OAAO,EAAO,KAAK,CAAC,CAAC;SAC9D;QACD,IAAI,MAAM,KAAK,SAAS,IAAI,MAAM,KAAK,IAAI,EAAE;YACzC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAO,MAAM,CAAC,CAAC;SAChE;QAED,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;;QAGlC,IAAI,iBAAiB,GAAa;YAC9B,kBAAkB;SACrB,CAAC;QACF,MAAM,wBAAwB,GAAuB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC9G,IAAI,wBAAwB,IAAI,SAAS,EAAE;YACvC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;SAC7D;;QAGD,MAAM,QAAQ,GAAa,EAC1B,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAwB,KAAK,EAAC,GAAG,IAAI,CAAC,QAAQ,aAAa,EACrF;YACI,MAAM,EAAE,eAAe;YACvB,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAYM,gBAAgB,CAAC,EAAU,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK;QAEtF,IAAI,EAAE,KAAK,IAAI,IAAI,EAAE,KAAK,SAAS,EAAE;YACjC,MAAM,IAAI,KAAK,CAAC,4EAA4E,CAAC,CAAC;SACjG;QAED,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;;QAGlC,IAAI,iBAAiB,GAAa,EACjC,CAAC;QACF,MAAM,wBAAwB,GAAuB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC9G,IAAI,wBAAwB,IAAI,SAAS,EAAE;YACvC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;SAC7D;;QAGD,MAAM,QAAQ,GAAa,EAC1B,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAM,QAAQ,EAAC,GAAG,IAAI,CAAC,QAAQ,eAAe,kBAAkB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,EACxG;YACI,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAYM,aAAa,CAAC,EAAU,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK;QAEnF,IAAI,EAAE,KAAK,IAAI,IAAI,EAAE,KAAK,SAAS,EAAE;YACjC,MAAM,IAAI,KAAK,CAAC,yEAAyE,CAAC,CAAC;SAC9F;QAED,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;;QAGlC,IAAI,iBAAiB,GAAa;YAC9B,kBAAkB;SACrB,CAAC;QACF,MAAM,wBAAwB,GAAuB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC9G,IAAI,wBAAwB,IAAI,SAAS,EAAE;YACvC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;SAC7D;;QAGD,MAAM,QAAQ,GAAa,EAC1B,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAM,KAAK,EAAC,GAAG,IAAI,CAAC,QAAQ,eAAe,kBAAkB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,EACrG;YACI,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAWM,WAAW,CAAC,UAAe,MAAM,EAAE,iBAA0B,KAAK;QAErE,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;;QAGlC,IAAI,iBAAiB,GAAa;YAC9B,kBAAkB;SACrB,CAAC;QACF,MAAM,wBAAwB,GAAuB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC9G,IAAI,wBAAwB,IAAI,SAAS,EAAE;YACvC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;SAC7D;;QAGD,MAAM,QAAQ,GAAa,EAC1B,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAM,KAAK,EAAC,GAAG,IAAI,CAAC,QAAQ,aAAa,EACnE;YACI,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAaM,yBAAyB,CAAC,KAAc,EAAE,MAAe,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK;QAIpH,IAAI,eAAe,GAAG,IAAI,UAAU,CAAC,EAAC,OAAO,EAAE,IAAI,0BAA0B,EAAE,EAAC,CAAC,CAAC;QAClF,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,EAAE;YACvC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,OAAO,EAAO,KAAK,CAAC,CAAC;SAC9D;QACD,IAAI,MAAM,KAAK,SAAS,IAAI,MAAM,KAAK,IAAI,EAAE;YACzC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAO,MAAM,CAAC,CAAC;SAChE;QAED,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;;QAGlC,IAAI,iBAAiB,GAAa;YAC9B,kBAAkB;SACrB,CAAC;QACF,MAAM,wBAAwB,GAAuB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC9G,IAAI,wBAAwB,IAAI,SAAS,EAAE;YACvC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;SAC7D;;QAGD,MAAM,QAAQ,GAAa,EAC1B,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAA+B,KAAK,EAAC,GAAG,IAAI,CAAC,QAAQ,6BAA6B,EAC5G;YACI,MAAM,EAAE,eAAe;YACvB,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAYM,8BAA8B,CAAC,EAAU,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK;QAEpG,IAAI,EAAE,KAAK,IAAI,IAAI,EAAE,KAAK,SAAS,EAAE;YACjC,MAAM,IAAI,KAAK,CAAC,0FAA0F,CAAC,CAAC;SAC/G;QAED,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;;QAGlC,IAAI,iBAAiB,GAAa,EACjC,CAAC;QACF,MAAM,wBAAwB,GAAuB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC9G,IAAI,wBAAwB,IAAI,SAAS,EAAE;YACvC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;SAC7D;;QAGD,MAAM,QAAQ,GAAa,EAC1B,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAM,QAAQ,EAAC,GAAG,IAAI,CAAC,QAAQ,+BAA+B,kBAAkB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,EACxH;YACI,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAYM,2BAA2B,CAAC,EAAU,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK;QAEjG,IAAI,EAAE,KAAK,IAAI,IAAI,EAAE,KAAK,SAAS,EAAE;YACjC,MAAM,IAAI,KAAK,CAAC,uFAAuF,CAAC,CAAC;SAC5G;QAED,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;;QAGlC,IAAI,iBAAiB,GAAa;YAC9B,kBAAkB;SACrB,CAAC;QACF,MAAM,wBAAwB,GAAuB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC9G,IAAI,wBAAwB,IAAI,SAAS,EAAE;YACvC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;SAC7D;;QAGD,MAAM,QAAQ,GAAa,EAC1B,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAM,KAAK,EAAC,GAAG,IAAI,CAAC,QAAQ,+BAA+B,kBAAkB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,EACrH;YACI,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAWM,yBAAyB,CAAC,UAAe,MAAM,EAAE,iBAA0B,KAAK;QAEnF,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;;QAGlC,IAAI,iBAAiB,GAAa;YAC9B,kBAAkB;SACrB,CAAC;QACF,MAAM,wBAAwB,GAAuB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC9G,IAAI,wBAAwB,IAAI,SAAS,EAAE;YACvC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;SAC7D;;QAGD,MAAM,QAAQ,GAAa,EAC1B,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAM,KAAK,EAAC,GAAG,IAAI,CAAC,QAAQ,6BAA6B,EACnF;YACI,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAeM,kBAAkB,CAAC,KAAc,EAAE,MAAe,EAAE,IAAa,EAAE,SAAkB,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK;QAMhJ,IAAI,eAAe,GAAG,IAAI,UAAU,CAAC,EAAC,OAAO,EAAE,IAAI,0BAA0B,EAAE,EAAC,CAAC,CAAC;QAClF,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,EAAE;YACvC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,OAAO,EAAO,KAAK,CAAC,CAAC;SAC9D;QACD,IAAI,MAAM,KAAK,SAAS,IAAI,MAAM,KAAK,IAAI,EAAE;YACzC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAO,MAAM,CAAC,CAAC;SAChE;QACD,IAAI,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,IAAI,EAAE;YACrC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,MAAM,EAAO,IAAI,CAAC,CAAC;SAC5D;QACD,IAAI,SAAS,KAAK,SAAS,IAAI,SAAS,KAAK,IAAI,EAAE;YAC/C,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,WAAW,EAAO,SAAS,CAAC,CAAC;SACtE;QAED,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;;QAGlC,IAAI,iBAAiB,GAAa;YAC9B,kBAAkB;SACrB,CAAC;QACF,MAAM,wBAAwB,GAAuB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC9G,IAAI,wBAAwB,IAAI,SAAS,EAAE;YACvC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;SAC7D;;QAGD,MAAM,QAAQ,GAAa,EAC1B,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAwB,KAAK,EAAC,GAAG,IAAI,CAAC,QAAQ,qBAAqB,EAC7F;YACI,MAAM,EAAE,eAAe;YACvB,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAYM,uBAAuB,CAAC,EAAU,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK;QAE7F,IAAI,EAAE,KAAK,IAAI,IAAI,EAAE,KAAK,SAAS,EAAE;YACjC,MAAM,IAAI,KAAK,CAAC,mFAAmF,CAAC,CAAC;SACxG;QAED,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;;QAGlC,IAAI,iBAAiB,GAAa,EACjC,CAAC;QACF,MAAM,wBAAwB,GAAuB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC9G,IAAI,wBAAwB,IAAI,SAAS,EAAE;YACvC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;SAC7D;;QAGD,MAAM,QAAQ,GAAa,EAC1B,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAM,QAAQ,EAAC,GAAG,IAAI,CAAC,QAAQ,uBAAuB,kBAAkB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,EAChH;YACI,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAYM,oBAAoB,CAAC,EAAU,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK;QAE1F,IAAI,EAAE,KAAK,IAAI,IAAI,EAAE,KAAK,SAAS,EAAE;YACjC,MAAM,IAAI,KAAK,CAAC,gFAAgF,CAAC,CAAC;SACrG;QAED,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;;QAGlC,IAAI,iBAAiB,GAAa;YAC9B,kBAAkB;SACrB,CAAC;QACF,MAAM,wBAAwB,GAAuB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC9G,IAAI,wBAAwB,IAAI,SAAS,EAAE;YACvC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;SAC7D;;QAGD,MAAM,QAAQ,GAAa,EAC1B,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAM,KAAK,EAAC,GAAG,IAAI,CAAC,QAAQ,uBAAuB,kBAAkB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,EAC7G;YACI,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAYM,uBAAuB,CAAC,EAAU,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK;QAE7F,IAAI,EAAE,KAAK,IAAI,IAAI,EAAE,KAAK,SAAS,EAAE;YACjC,MAAM,IAAI,KAAK,CAAC,mFAAmF,CAAC,CAAC;SACxG;QAED,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;;QAGlC,IAAI,iBAAiB,GAAa;YAC9B,kBAAkB;SACrB,CAAC;QACF,MAAM,wBAAwB,GAAuB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC9G,IAAI,wBAAwB,IAAI,SAAS,EAAE;YACvC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;SAC7D;;QAGD,MAAM,QAAQ,GAAa,EAC1B,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAM,KAAK,EAAC,GAAG,IAAI,CAAC,QAAQ,uBAAuB,kBAAkB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,EACjH;YACI,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAWM,kBAAkB,CAAC,UAAe,MAAM,EAAE,iBAA0B,KAAK;QAE5E,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;;QAGlC,IAAI,iBAAiB,GAAa;YAC9B,kBAAkB;SACrB,CAAC;QACF,MAAM,wBAAwB,GAAuB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC9G,IAAI,wBAAwB,IAAI,SAAS,EAAE;YACvC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;SAC7D;;QAGD,MAAM,QAAQ,GAAa,EAC1B,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAM,KAAK,EAAC,GAAG,IAAI,CAAC,QAAQ,qBAAqB,EAC3E;YACI,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAqBM,yBAAyB,CAAC,KAAc,EAAE,MAAe,EAAE,IAAa,EAAE,uBAAgC,EAAE,iBAA0B,EAAE,GAAY,EAAE,UAAmB,EAAE,KAAc,EAAE,MAAe,EAAE,OAAgB,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK;QAYvR,IAAI,eAAe,GAAG,IAAI,UAAU,CAAC,EAAC,OAAO,EAAE,IAAI,0BAA0B,EAAE,EAAC,CAAC,CAAC;QAClF,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,EAAE;YACvC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,OAAO,EAAO,KAAK,CAAC,CAAC;SAC9D;QACD,IAAI,MAAM,KAAK,SAAS,IAAI,MAAM,KAAK,IAAI,EAAE;YACzC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAO,MAAM,CAAC,CAAC;SAChE;QACD,IAAI,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,IAAI,EAAE;YACrC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,MAAM,EAAO,IAAI,CAAC,CAAC;SAC5D;QACD,IAAI,uBAAuB,KAAK,SAAS,IAAI,uBAAuB,KAAK,IAAI,EAAE;YAC3E,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,yBAAyB,EAAO,uBAAuB,CAAC,CAAC;SAClG;QACD,IAAI,iBAAiB,KAAK,SAAS,IAAI,iBAAiB,KAAK,IAAI,EAAE;YAC/D,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,mBAAmB,EAAO,iBAAiB,CAAC,CAAC;SACtF;QACD,IAAI,GAAG,KAAK,SAAS,IAAI,GAAG,KAAK,IAAI,EAAE;YACnC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,KAAK,EAAO,GAAG,CAAC,CAAC;SAC1D;QACD,IAAI,UAAU,KAAK,SAAS,IAAI,UAAU,KAAK,IAAI,EAAE;YACjD,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,YAAY,EAAO,UAAU,CAAC,CAAC;SACxE;QACD,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,EAAE;YACvC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,OAAO,EAAO,KAAK,CAAC,CAAC;SAC9D;QACD,IAAI,MAAM,KAAK,SAAS,IAAI,MAAM,KAAK,IAAI,EAAE;YACzC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAO,MAAM,CAAC,CAAC;SAChE;QACD,IAAI,OAAO,KAAK,SAAS,IAAI,OAAO,KAAK,IAAI,EAAE;YAC3C,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,SAAS,EAAO,OAAO,CAAC,CAAC;SAClE;QAED,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;;QAGlC,IAAI,iBAAiB,GAAa;YAC9B,kBAAkB;SACrB,CAAC;QACF,MAAM,wBAAwB,GAAuB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC9G,IAAI,wBAAwB,IAAI,SAAS,EAAE;YACvC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;SAC7D;;QAGD,MAAM,QAAQ,GAAa,EAC1B,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAgC,KAAK,EAAC,GAAG,IAAI,CAAC,QAAQ,6BAA6B,EAC7G;YACI,MAAM,EAAE,eAAe;YACvB,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAYM,8BAA8B,CAAC,EAAU,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK;QAEpG,IAAI,EAAE,KAAK,IAAI,IAAI,EAAE,KAAK,SAAS,EAAE;YACjC,MAAM,IAAI,KAAK,CAAC,0FAA0F,CAAC,CAAC;SAC/G;QAED,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;;QAGlC,IAAI,iBAAiB,GAAa,EACjC,CAAC;QACF,MAAM,wBAAwB,GAAuB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC9G,IAAI,wBAAwB,IAAI,SAAS,EAAE;YACvC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;SAC7D;;QAGD,MAAM,QAAQ,GAAa,EAC1B,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAM,QAAQ,EAAC,GAAG,IAAI,CAAC,QAAQ,+BAA+B,kBAAkB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,EACxH;YACI,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAYM,2BAA2B,CAAC,EAAU,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK;QAEjG,IAAI,EAAE,KAAK,IAAI,IAAI,EAAE,KAAK,SAAS,EAAE;YACjC,MAAM,IAAI,KAAK,CAAC,uFAAuF,CAAC,CAAC;SAC5G;QAED,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;;QAGlC,IAAI,iBAAiB,GAAa;YAC9B,kBAAkB;SACrB,CAAC;QACF,MAAM,wBAAwB,GAAuB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC9G,IAAI,wBAAwB,IAAI,SAAS,EAAE;YACvC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;SAC7D;;QAGD,MAAM,QAAQ,GAAa,EAC1B,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAM,KAAK,EAAC,GAAG,IAAI,CAAC,QAAQ,+BAA+B,kBAAkB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,EACrH;YACI,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAWM,yBAAyB,CAAC,UAAe,MAAM,EAAE,iBAA0B,KAAK;QAEnF,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;;QAGlC,IAAI,iBAAiB,GAAa;YAC9B,kBAAkB;SACrB,CAAC;QACF,MAAM,wBAAwB,GAAuB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC9G,IAAI,wBAAwB,IAAI,SAAS,EAAE;YACvC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;SAC7D;;QAGD,MAAM,QAAQ,GAAa,EAC1B,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAM,KAAK,EAAC,GAAG,IAAI,CAAC,QAAQ,6BAA6B,EACnF;YACI,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAgBM,oBAAoB,CAAC,KAAc,EAAE,MAAe,EAAE,IAAa,EAAE,IAAa,EAAE,SAAkB,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK;QAOjK,IAAI,eAAe,GAAG,IAAI,UAAU,CAAC,EAAC,OAAO,EAAE,IAAI,0BAA0B,EAAE,EAAC,CAAC,CAAC;QAClF,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,EAAE;YACvC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,OAAO,EAAO,KAAK,CAAC,CAAC;SAC9D;QACD,IAAI,MAAM,KAAK,SAAS,IAAI,MAAM,KAAK,IAAI,EAAE;YACzC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAO,MAAM,CAAC,CAAC;SAChE;QACD,IAAI,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,IAAI,EAAE;YACrC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,MAAM,EAAO,IAAI,CAAC,CAAC;SAC5D;QACD,IAAI,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,IAAI,EAAE;YACrC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,MAAM,EAAO,IAAI,CAAC,CAAC;SAC5D;QACD,IAAI,SAAS,KAAK,SAAS,IAAI,SAAS,KAAK,IAAI,EAAE;YAC/C,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,WAAW,EAAO,SAAS,CAAC,CAAC;SACtE;QAED,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;;QAGlC,IAAI,iBAAiB,GAAa;YAC9B,kBAAkB;SACrB,CAAC;QACF,MAAM,wBAAwB,GAAuB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC9G,IAAI,wBAAwB,IAAI,SAAS,EAAE;YACvC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;SAC7D;;QAGD,MAAM,QAAQ,GAAa,EAC1B,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAA2B,KAAK,EAAC,GAAG,IAAI,CAAC,QAAQ,uBAAuB,EAClG;YACI,MAAM,EAAE,eAAe;YACvB,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAYM,yBAAyB,CAAC,EAAU,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK;QAE/F,IAAI,EAAE,KAAK,IAAI,IAAI,EAAE,KAAK,SAAS,EAAE;YACjC,MAAM,IAAI,KAAK,CAAC,qFAAqF,CAAC,CAAC;SAC1G;QAED,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;;QAGlC,IAAI,iBAAiB,GAAa,EACjC,CAAC;QACF,MAAM,wBAAwB,GAAuB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC9G,IAAI,wBAAwB,IAAI,SAAS,EAAE;YACvC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;SAC7D;;QAGD,MAAM,QAAQ,GAAa,EAC1B,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAM,QAAQ,EAAC,GAAG,IAAI,CAAC,QAAQ,yBAAyB,kBAAkB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,EAClH;YACI,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAYM,sBAAsB,CAAC,EAAU,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK;QAE5F,IAAI,EAAE,KAAK,IAAI,IAAI,EAAE,KAAK,SAAS,EAAE;YACjC,MAAM,IAAI,KAAK,CAAC,kFAAkF,CAAC,CAAC;SACvG;QAED,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;;QAGlC,IAAI,iBAAiB,GAAa;YAC9B,kBAAkB;SACrB,CAAC;QACF,MAAM,wBAAwB,GAAuB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC9G,IAAI,wBAAwB,IAAI,SAAS,EAAE;YACvC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;SAC7D;;QAGD,MAAM,QAAQ,GAAa,EAC1B,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAM,KAAK,EAAC,GAAG,IAAI,CAAC,QAAQ,yBAAyB,kBAAkB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,EAC/G;YACI,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAcM,2BAA2B,CAAC,EAAU,EAAE,KAAc,EAAE,MAAe,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK;QAElI,IAAI,EAAE,KAAK,IAAI,IAAI,EAAE,KAAK,SAAS,EAAE;YACjC,MAAM,IAAI,KAAK,CAAC,uFAAuF,CAAC,CAAC;SAC5G;QAID,IAAI,eAAe,GAAG,IAAI,UAAU,CAAC,EAAC,OAAO,EAAE,IAAI,0BAA0B,EAAE,EAAC,CAAC,CAAC;QAClF,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,EAAE;YACvC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,OAAO,EAAO,KAAK,CAAC,CAAC;SAC9D;QACD,IAAI,MAAM,KAAK,SAAS,IAAI,MAAM,KAAK,IAAI,EAAE;YACzC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAO,MAAM,CAAC,CAAC;SAChE;QAED,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;;QAGlC,IAAI,iBAAiB,GAAa;YAC9B,kBAAkB;SACrB,CAAC;QACF,MAAM,wBAAwB,GAAuB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC9G,IAAI,wBAAwB,IAAI,SAAS,EAAE;YACvC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;SAC7D;;QAGD,MAAM,QAAQ,GAAa,EAC1B,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAA+B,KAAK,EAAC,GAAG,IAAI,CAAC,QAAQ,yBAAyB,kBAAkB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,QAAQ,EAC9I;YACI,MAAM,EAAE,eAAe;YACvB,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAiBM,wBAAwB,CAAC,KAAc,EAAE,MAAe,EAAE,IAAa,EAAE,kBAA2B,EAAE,IAAa,EAAE,SAAkB,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK;QAQlM,IAAI,eAAe,GAAG,IAAI,UAAU,CAAC,EAAC,OAAO,EAAE,IAAI,0BAA0B,EAAE,EAAC,CAAC,CAAC;QAClF,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,EAAE;YACvC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,OAAO,EAAO,KAAK,CAAC,CAAC;SAC9D;QACD,IAAI,MAAM,KAAK,SAAS,IAAI,MAAM,KAAK,IAAI,EAAE;YACzC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAO,MAAM,CAAC,CAAC;SAChE;QACD,IAAI,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,IAAI,EAAE;YACrC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,MAAM,EAAO,IAAI,CAAC,CAAC;SAC5D;QACD,IAAI,kBAAkB,KAAK,SAAS,IAAI,kBAAkB,KAAK,IAAI,EAAE;YACjE,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,oBAAoB,EAAO,kBAAkB,CAAC,CAAC;SACxF;QACD,IAAI,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,IAAI,EAAE;YACrC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,MAAM,EAAO,IAAI,CAAC,CAAC;SAC5D;QACD,IAAI,SAAS,KAAK,SAAS,IAAI,SAAS,KAAK,IAAI,EAAE;YAC/C,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,WAAW,EAAO,SAAS,CAAC,CAAC;SACtE;QAED,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;;QAGlC,IAAI,iBAAiB,GAAa;YAC9B,kBAAkB;SACrB,CAAC;QACF,MAAM,wBAAwB,GAAuB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC9G,IAAI,wBAAwB,IAAI,SAAS,EAAE;YACvC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;SAC7D;;QAGD,MAAM,QAAQ,GAAa,EAC1B,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAA+B,KAAK,EAAC,GAAG,IAAI,CAAC,QAAQ,4BAA4B,EAC3G;YACI,MAAM,EAAE,eAAe;YACvB,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAcM,gCAAgC,CAAC,EAAU,EAAE,KAAc,EAAE,MAAe,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK;QAEvI,IAAI,EAAE,KAAK,IAAI,IAAI,EAAE,KAAK,SAAS,EAAE;YACjC,MAAM,IAAI,KAAK,CAAC,4FAA4F,CAAC,CAAC;SACjH;QAID,IAAI,eAAe,GAAG,IAAI,UAAU,CAAC,EAAC,OAAO,EAAE,IAAI,0BAA0B,EAAE,EAAC,CAAC,CAAC;QAClF,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,EAAE;YACvC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,OAAO,EAAO,KAAK,CAAC,CAAC;SAC9D;QACD,IAAI,MAAM,KAAK,SAAS,IAAI,MAAM,KAAK,IAAI,EAAE;YACzC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAO,MAAM,CAAC,CAAC;SAChE;QAED,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;;QAGlC,IAAI,iBAAiB,GAAa;YAC9B,kBAAkB;SACrB,CAAC;QACF,MAAM,wBAAwB,GAAuB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC9G,IAAI,wBAAwB,IAAI,SAAS,EAAE;YACvC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;SAC7D;;QAGD,MAAM,QAAQ,GAAa,EAC1B,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAgC,KAAK,EAAC,GAAG,IAAI,CAAC,QAAQ,8BAA8B,kBAAkB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,SAAS,EACrJ;YACI,MAAM,EAAE,eAAe;YACvB,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAYM,6BAA6B,CAAC,EAAU,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK;QAEnG,IAAI,EAAE,KAAK,IAAI,IAAI,EAAE,KAAK,SAAS,EAAE;YACjC,MAAM,IAAI,KAAK,CAAC,yFAAyF,CAAC,CAAC;SAC9G;QAED,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;;QAGlC,IAAI,iBAAiB,GAAa,EACjC,CAAC;QACF,MAAM,wBAAwB,GAAuB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC9G,IAAI,wBAAwB,IAAI,SAAS,EAAE;YACvC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;SAC7D;;QAGD,MAAM,QAAQ,GAAa,EAC1B,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAM,QAAQ,EAAC,GAAG,IAAI,CAAC,QAAQ,8BAA8B,kBAAkB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,EACvH;YACI,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAYM,0BAA0B,CAAC,EAAU,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK;QAEhG,IAAI,EAAE,KAAK,IAAI,IAAI,EAAE,KAAK,SAAS,EAAE;YACjC,MAAM,IAAI,KAAK,CAAC,sFAAsF,CAAC,CAAC;SAC3G;QAED,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;;QAGlC,IAAI,iBAAiB,GAAa;YAC9B,kBAAkB;SACrB,CAAC;QACF,MAAM,wBAAwB,GAAuB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC9G,IAAI,wBAAwB,IAAI,SAAS,EAAE;YACvC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;SAC7D;;QAGD,MAAM,QAAQ,GAAa,EAC1B,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAM,KAAK,EAAC,GAAG,IAAI,CAAC,QAAQ,8BAA8B,kBAAkB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,EACpH;YACI,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAWM,wBAAwB,CAAC,UAAe,MAAM,EAAE,iBAA0B,KAAK;QAElF,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;;QAGlC,IAAI,iBAAiB,GAAa;YAC9B,kBAAkB;SACrB,CAAC;QACF,MAAM,wBAAwB,GAAuB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC9G,IAAI,wBAAwB,IAAI,SAAS,EAAE;YACvC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;SAC7D;;QAGD,MAAM,QAAQ,GAAa,EAC1B,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAM,KAAK,EAAC,GAAG,IAAI,CAAC,QAAQ,4BAA4B,EAClF;YACI,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAWM,oBAAoB,CAAC,UAAe,MAAM,EAAE,iBAA0B,KAAK;QAE9E,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;;QAGlC,IAAI,iBAAiB,GAAa;YAC9B,kBAAkB;SACrB,CAAC;QACF,MAAM,wBAAwB,GAAuB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC9G,IAAI,wBAAwB,IAAI,SAAS,EAAE;YACvC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;SAC7D;;QAGD,MAAM,QAAQ,GAAa,EAC1B,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAM,KAAK,EAAC,GAAG,IAAI,CAAC,QAAQ,uBAAuB,EAC7E;YACI,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAiBM,mBAAmB,CAAC,KAAc,EAAE,MAAe,EAAE,IAAa,EAAE,oBAA6B,EAAE,IAAa,EAAE,SAAkB,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK;QAQ/L,IAAI,eAAe,GAAG,IAAI,UAAU,CAAC,EAAC,OAAO,EAAE,IAAI,0BAA0B,EAAE,EAAC,CAAC,CAAC;QAClF,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,EAAE;YACvC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,OAAO,EAAO,KAAK,CAAC,CAAC;SAC9D;QACD,IAAI,MAAM,KAAK,SAAS,IAAI,MAAM,KAAK,IAAI,EAAE;YACzC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAO,MAAM,CAAC,CAAC;SAChE;QACD,IAAI,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,IAAI,EAAE;YACrC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,MAAM,EAAO,IAAI,CAAC,CAAC;SAC5D;QACD,IAAI,oBAAoB,KAAK,SAAS,IAAI,oBAAoB,KAAK,IAAI,EAAE;YACrE,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,sBAAsB,EAAO,oBAAoB,CAAC,CAAC;SAC5F;QACD,IAAI,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,IAAI,EAAE;YACrC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,MAAM,EAAO,IAAI,CAAC,CAAC;SAC5D;QACD,IAAI,SAAS,KAAK,SAAS,IAAI,SAAS,KAAK,IAAI,EAAE;YAC/C,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,WAAW,EAAO,SAAS,CAAC,CAAC;SACtE;QAED,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;;QAGlC,IAAI,iBAAiB,GAAa;YAC9B,kBAAkB;SACrB,CAAC;QACF,MAAM,wBAAwB,GAAuB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC9G,IAAI,wBAAwB,IAAI,SAAS,EAAE;YACvC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;SAC7D;;QAGD,MAAM,QAAQ,GAAa,EAC1B,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAA2B,KAAK,EAAC,GAAG,IAAI,CAAC,QAAQ,sBAAsB,EACjG;YACI,MAAM,EAAE,eAAe;YACvB,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAYM,wBAAwB,CAAC,EAAU,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK;QAE9F,IAAI,EAAE,KAAK,IAAI,IAAI,EAAE,KAAK,SAAS,EAAE;YACjC,MAAM,IAAI,KAAK,CAAC,oFAAoF,CAAC,CAAC;SACzG;QAED,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;;QAGlC,IAAI,iBAAiB,GAAa,EACjC,CAAC;QACF,MAAM,wBAAwB,GAAuB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC9G,IAAI,wBAAwB,IAAI,SAAS,EAAE;YACvC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;SAC7D;;QAGD,MAAM,QAAQ,GAAa,EAC1B,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAM,QAAQ,EAAC,GAAG,IAAI,CAAC,QAAQ,wBAAwB,kBAAkB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,EACjH;YACI,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAYM,qBAAqB,CAAC,EAAU,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK;QAE3F,IAAI,EAAE,KAAK,IAAI,IAAI,EAAE,KAAK,SAAS,EAAE;YACjC,MAAM,IAAI,KAAK,CAAC,iFAAiF,CAAC,CAAC;SACtG;QAED,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;;QAGlC,IAAI,iBAAiB,GAAa;YAC9B,kBAAkB;SACrB,CAAC;QACF,MAAM,wBAAwB,GAAuB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC9G,IAAI,wBAAwB,IAAI,SAAS,EAAE;YACvC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;SAC7D;;QAGD,MAAM,QAAQ,GAAa,EAC1B,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAM,KAAK,EAAC,GAAG,IAAI,CAAC,QAAQ,wBAAwB,kBAAkB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,EAC9G;YACI,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAWM,mBAAmB,CAAC,UAAe,MAAM,EAAE,iBAA0B,KAAK;QAE7E,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;;QAGlC,IAAI,iBAAiB,GAAa;YAC9B,kBAAkB;SACrB,CAAC;QACF,MAAM,wBAAwB,GAAuB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC9G,IAAI,wBAAwB,IAAI,SAAS,EAAE;YACvC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;SAC7D;;QAGD,MAAM,QAAQ,GAAa,EAC1B,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAM,KAAK,EAAC,GAAG,IAAI,CAAC,QAAQ,sBAAsB,EAC5E;YACI,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAiBM,sBAAsB,CAAC,KAAc,EAAE,MAAe,EAAE,IAAa,EAAE,IAAa,EAAE,SAAkB,EAAE,MAAe,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK;QAQpL,IAAI,eAAe,GAAG,IAAI,UAAU,CAAC,EAAC,OAAO,EAAE,IAAI,0BAA0B,EAAE,EAAC,CAAC,CAAC;QAClF,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,EAAE;YACvC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,OAAO,EAAO,KAAK,CAAC,CAAC;SAC9D;QACD,IAAI,MAAM,KAAK,SAAS,IAAI,MAAM,KAAK,IAAI,EAAE;YACzC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAO,MAAM,CAAC,CAAC;SAChE;QACD,IAAI,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,IAAI,EAAE;YACrC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,MAAM,EAAO,IAAI,CAAC,CAAC;SAC5D;QACD,IAAI,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,IAAI,EAAE;YACrC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,MAAM,EAAO,IAAI,CAAC,CAAC;SAC5D;QACD,IAAI,SAAS,KAAK,SAAS,IAAI,SAAS,KAAK,IAAI,EAAE;YAC/C,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,WAAW,EAAO,SAAS,CAAC,CAAC;SACtE;QACD,IAAI,MAAM,KAAK,SAAS,IAAI,MAAM,KAAK,IAAI,EAAE;YACzC,eAAe,GAAG,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAO,MAAM,CAAC,CAAC;SAChE;QAED,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;;QAGlC,IAAI,iBAAiB,GAAa;YAC9B,kBAAkB;SACrB,CAAC;QACF,MAAM,wBAAwB,GAAuB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC9G,IAAI,wBAAwB,IAAI,SAAS,EAAE;YACvC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;SAC7D;;QAGD,MAAM,QAAQ,GAAa,EAC1B,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAA8B,KAAK,EAAC,GAAG,IAAI,CAAC,QAAQ,yBAAyB,EACvG;YACI,MAAM,EAAE,eAAe;YACvB,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAYM,2BAA2B,CAAC,EAAU,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK;QAEjG,IAAI,EAAE,KAAK,IAAI,IAAI,EAAE,KAAK,SAAS,EAAE;YACjC,MAAM,IAAI,KAAK,CAAC,uFAAuF,CAAC,CAAC;SAC5G;QAED,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;;QAGlC,IAAI,iBAAiB,GAAa,EACjC,CAAC;QACF,MAAM,wBAAwB,GAAuB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC9G,IAAI,wBAAwB,IAAI,SAAS,EAAE;YACvC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;SAC7D;;QAGD,MAAM,QAAQ,GAAa,EAC1B,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAM,QAAQ,EAAC,GAAG,IAAI,CAAC,QAAQ,2BAA2B,kBAAkB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,EACpH;YACI,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAYM,wBAAwB,CAAC,EAAU,EAAE,UAAe,MAAM,EAAE,iBAA0B,KAAK;QAE9F,IAAI,EAAE,KAAK,IAAI,IAAI,EAAE,KAAK,SAAS,EAAE;YACjC,MAAM,IAAI,KAAK,CAAC,oFAAoF,CAAC,CAAC;SACzG;QAED,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;;QAGlC,IAAI,iBAAiB,GAAa;YAC9B,kBAAkB;SACrB,CAAC;QACF,MAAM,wBAAwB,GAAuB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC9G,IAAI,wBAAwB,IAAI,SAAS,EAAE;YACvC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;SAC7D;;QAGD,MAAM,QAAQ,GAAa,EAC1B,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAM,KAAK,EAAC,GAAG,IAAI,CAAC,QAAQ,2BAA2B,kBAAkB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,EACjH;YACI,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAWM,sBAAsB,CAAC,UAAe,MAAM,EAAE,iBAA0B,KAAK;QAEhF,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;;QAGlC,IAAI,iBAAiB,GAAa;YAC9B,kBAAkB;SACrB,CAAC;QACF,MAAM,wBAAwB,GAAuB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC9G,IAAI,wBAAwB,IAAI,SAAS,EAAE;YACvC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;SAC7D;;QAGD,MAAM,QAAQ,GAAa,EAC1B,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAM,KAAK,EAAC,GAAG,IAAI,CAAC,QAAQ,yBAAyB,EAC/E;YACI,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAWM,UAAU,CAAC,UAAe,MAAM,EAAE,iBAA0B,KAAK;QAEpE,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;;QAGlC,IAAI,iBAAiB,GAAa;YAC9B,kBAAkB;SACrB,CAAC;QACF,MAAM,wBAAwB,GAAuB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC9G,IAAI,wBAAwB,IAAI,SAAS,EAAE;YACvC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;SAC7D;;QAGD,MAAM,QAAQ,GAAa,EAC1B,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAoB,KAAK,EAAC,GAAG,IAAI,CAAC,QAAQ,UAAU,EAC9E;YACI,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;IAWM,OAAO,CAAC,UAAe,MAAM,EAAE,iBAA0B,KAAK;QAEjE,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;;QAGlC,IAAI,iBAAiB,GAAa;YAC9B,kBAAkB;SACrB,CAAC;QACF,MAAM,wBAAwB,GAAuB,IAAI,CAAC,aAAa,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC;QAC9G,IAAI,wBAAwB,IAAI,SAAS,EAAE;YACvC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,wBAAwB,CAAC,CAAC;SAC7D;;QAGD,MAAM,QAAQ,GAAa,EAC1B,CAAC;QAEF,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAqB,SAAS,EAAC,GAAG,IAAI,CAAC,QAAQ,IAAI,EAC7E;YACI,eAAe,EAAE,IAAI,CAAC,aAAa,CAAC,eAAe;YACnD,OAAO,EAAE,OAAO;YAChB,OAAO,EAAE,OAAO;YAChB,cAAc,EAAE,cAAc;SACjC,CACJ,CAAC;KACL;CAEJ,CAAA;;YA5sDqC,UAAU;yCAAG,QAAQ,YAAG,MAAM,SAAC,SAAS;YAA+C,aAAa,uBAAvC,QAAQ;;AAN9F,cAAc;IAD1B,UAAU,EAAE;IAOsCA,WAAA,QAAQ,EAAE,CAAA,EAACA,WAAA,MAAM,CAAC,SAAS,CAAC,CAAA,EAAoBA,WAAA,QAAQ,EAAE,CAAA;GANhG,cAAc,CAktD1B;;MCnvDY,IAAI,GAAG,CAAC,cAAc,CAAC;;;ICYvB,SAAS,iBAAtB,MAAa,SAAS;IAQlB,YAAqC,YAAuB,EACnC,IAAgB;QACrC,IAAI,YAAY,EAAE;YACd,MAAM,IAAI,KAAK,CAAC,kEAAkE,CAAC,CAAC;SACvF;QACD,IAAI,CAAC,IAAI,EAAE;YACP,MAAM,IAAI,KAAK,CAAC,+DAA+D;gBAC/E,0DAA0D,CAAC,CAAC;SAC/D;KACJ;IAhBM,OAAO,OAAO,CAAC,oBAAyC;QAC3D,OAAO;YACH,QAAQ,EAAE,WAAS;YACnB,SAAS,EAAE,CAAE,EAAE,OAAO,EAAE,aAAa,EAAE,UAAU,EAAE,oBAAoB,EAAE,CAAE;SAC9E,CAAC;KACL;CAYJ,CAAA;;YAVsD,SAAS,uBAA9C,QAAQ,YAAI,QAAQ;YACH,UAAU,uBAA3B,QAAQ;;AATb,SAAS;IAPrB,QAAQ,CAAC;QACR,OAAO,EAAO,EAAE;QAChB,YAAY,EAAE,EAAE;QAChB,OAAO,EAAO,EAAE;QAChB,SAAS,EAAE;YACT,cAAc;SAAE;KACnB,CAAC;IASgBA,WAAA,QAAQ,EAAE,CAAA,EAAEA,WAAA,QAAQ,EAAE,CAAA;IACtBA,WAAA,QAAQ,EAAE,CAAA;GATf,SAAS,CAkBrB;;AChCD;;GAEG;;;;"}