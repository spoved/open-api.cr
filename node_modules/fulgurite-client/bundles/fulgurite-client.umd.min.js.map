{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","ng://fulgurite-client/encoder.ts","ng://fulgurite-client/variables.ts","ng://fulgurite-client/configuration.ts","ng://fulgurite-client/api/default.service.ts","ng://fulgurite-client/api/api.ts","ng://fulgurite-client/api.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","__values","o","s","Symbol","iterator","m","call","next","value","done","TypeError","CustomHttpUrlEncodingCodec","_super","__","this","constructor","prototype","create","tslib_1.__extends","encodeKey","k","replace","encodeValue","v","HttpUrlEncodingCodec","BASE_PATH","InjectionToken","Configuration","configurationParameters","apiKeys","username","password","accessToken","basePath","withCredentials","selectHeaderContentType","contentTypes","_this","type","find","x","isJsonMime","undefined","selectHeaderAccept","accepts","mime","jsonMime","RegExp","test","toLowerCase","DefaultService","httpClient","configuration","defaultHeaders","HttpHeaders","canConsumeForm","consumes","consumes_1","tslib_1.__values","consumes_1_1","apiV1DownloadNzbIdGet","id","observe","reportProgress","Error","headers","httpHeaderAcceptSelected","set","request","encodeURIComponent","String","apiV1JobGet","limit","offset","queryParameters","HttpParams","encoder","params","apiV1JobIdDelete","apiV1JobIdGet","apiV1JobPut","apiV1ReleaseMatchErrorGet","apiV1ReleaseMatchErrorIdDelete","apiV1ReleaseMatchErrorIdGet","apiV1ReleaseMatchErrorPut","apiV1ReleaseNzbGet","name","name_like","apiV1ReleaseNzbIdDelete","apiV1ReleaseNzbIdGet","apiV1ReleaseNzbIdRawGet","apiV1ReleaseNzbPut","apiV1UsenetBinaryChunkGet","uuid","usenet_binary_part_uuid","usenet_group_uuid","num","message_id","chunk","poster","subject","apiV1UsenetBinaryChunkIdDelete","apiV1UsenetBinaryChunkIdGet","apiV1UsenetBinaryChunkPut","apiV1UsenetBinaryGet","apiV1UsenetBinaryIdDelete","apiV1UsenetBinaryIdGet","apiV1UsenetBinaryIdPartsGet","apiV1UsenetBinaryPartGet","usenet_binary_uuid","file","file_like","apiV1UsenetBinaryPartIdChunksGet","apiV1UsenetBinaryPartIdDelete","apiV1UsenetBinaryPartIdGet","apiV1UsenetBinaryPartPut","apiV1UsenetBinaryPut","apiV1UsenetGroupGet","usenet_provider_uuid","apiV1UsenetGroupIdDelete","apiV1UsenetGroupIdGet","apiV1UsenetGroupPut","apiV1UsenetProviderGet","active","apiV1UsenetProviderIdDelete","apiV1UsenetProviderIdGet","apiV1UsenetProviderPut","healthzGet","options","HttpClient","Optional","Inject","args","Injectable","tslib_1.__param","APIS","ApiModule","parentModule","http","forRoot","configurationFactory","ngModule","ApiModule_1","providers","provide","useFactory","SkipSelf","NgModule","imports","declarations","exports","csv","tsv","ssv","pipes"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","    import { HttpUrlEncodingCodec } from '@angular/common/http';\n\n/**\n* CustomHttpUrlEncodingCodec\n* Fix plus sign (+) not encoding, so sent as blank space\n* See: https://github.com/angular/angular/issues/11058#issuecomment-247367318\n*/\nexport class CustomHttpUrlEncodingCodec extends HttpUrlEncodingCodec {\n    encodeKey(k: string): string {\n        k = super.encodeKey(k);\n        return k.replace(/\\+/gi, '%2B');\n    }\n    encodeValue(v: string): string {\n        v = super.encodeValue(v);\n        return v.replace(/\\+/gi, '%2B');\n    }\n}\n\n","import { InjectionToken } from '@angular/core';\n\nexport const BASE_PATH = new InjectionToken<string>('basePath');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","export interface ConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n}\n\nexport class Configuration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n\n    constructor(configurationParameters: ConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length == 0) {\n            return undefined;\n        }\n\n        let type = contentTypes.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length == 0) {\n            return undefined;\n        }\n\n        let type = accepts.find(x => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime != null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","/**\n * Fulgurite API\n * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\n *\n * OpenAPI spec version: 3.0.0\n * \n *\n * NOTE: This class is auto generated by the swagger code generator program.\n * https://github.com/swagger-api/swagger-codegen.git\n * Do not edit the class manually.\n *//* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent }                           from '@angular/common/http';\nimport { CustomHttpUrlEncodingCodec }                        from '../encoder';\n\nimport { Observable }                                        from 'rxjs';\n\nimport { FulguriteModelBinaryChunkList } from '../model/fulguriteModelBinaryChunkList';\nimport { FulguriteModelBinaryList } from '../model/fulguriteModelBinaryList';\nimport { FulguriteModelBinaryPartList } from '../model/fulguriteModelBinaryPartList';\nimport { FulguriteModelJobList } from '../model/fulguriteModelJobList';\nimport { FulguriteModelMatchErrorList } from '../model/fulguriteModelMatchErrorList';\nimport { FulguriteModelNzbList } from '../model/fulguriteModelNzbList';\nimport { FulguriteUsenetGroupList } from '../model/fulguriteUsenetGroupList';\nimport { FulguriteUsenetProviderList } from '../model/fulguriteUsenetProviderList';\nimport { InlineResponse200 } from '../model/inlineResponse200';\nimport { InlineResponse2001 } from '../model/inlineResponse2001';\n\nimport { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { Configuration }                                     from '../configuration';\n\n\n@Injectable()\nexport class DefaultService {\n\n    protected basePath = '/';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new Configuration();\n\n    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {\n        if (basePath) {\n            this.basePath = basePath;\n        }\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = basePath || configuration.basePath || this.basePath;\n        }\n    }\n\n    /**\n     * @param consumes string[] mime-types\n     * @return true: consumes contains 'multipart/form-data', false: otherwise\n     */\n    private canConsumeForm(consumes: string[]): boolean {\n        const form = 'multipart/form-data';\n        for (const consume of consumes) {\n            if (form === consume) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * get Fulgurite::Model::Nzb\n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1DownloadNzbIdGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1DownloadNzbIdGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1DownloadNzbIdGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1DownloadNzbIdGet(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiV1DownloadNzbIdGet.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('get',`${this.basePath}/api/v1/download/nzb/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * get Fulgurite::Model::Job list\n     * \n     * @param limit \n     * @param offset \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1JobGet(limit?: string, offset?: string, observe?: 'body', reportProgress?: boolean): Observable<FulguriteModelJobList>;\n    public apiV1JobGet(limit?: string, offset?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FulguriteModelJobList>>;\n    public apiV1JobGet(limit?: string, offset?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FulguriteModelJobList>>;\n    public apiV1JobGet(limit?: string, offset?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (limit !== undefined && limit !== null) {\n            queryParameters = queryParameters.set('limit', <any>limit);\n        }\n        if (offset !== undefined && offset !== null) {\n            queryParameters = queryParameters.set('offset', <any>offset);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<FulguriteModelJobList>('get',`${this.basePath}/api/v1/job`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * delete Fulgurite::Model::Job\n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1JobIdDelete(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1JobIdDelete(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1JobIdDelete(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1JobIdDelete(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiV1JobIdDelete.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/api/v1/job/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * get Fulgurite::Model::Job\n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1JobIdGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1JobIdGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1JobIdGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1JobIdGet(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiV1JobIdGet.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('get',`${this.basePath}/api/v1/job/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * put Fulgurite::Model::Job\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1JobPut(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1JobPut(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1JobPut(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1JobPut(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('put',`${this.basePath}/api/v1/job`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * get Fulgurite::Model::MatchError list\n     * \n     * @param limit \n     * @param offset \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1ReleaseMatchErrorGet(limit?: string, offset?: string, observe?: 'body', reportProgress?: boolean): Observable<FulguriteModelMatchErrorList>;\n    public apiV1ReleaseMatchErrorGet(limit?: string, offset?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FulguriteModelMatchErrorList>>;\n    public apiV1ReleaseMatchErrorGet(limit?: string, offset?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FulguriteModelMatchErrorList>>;\n    public apiV1ReleaseMatchErrorGet(limit?: string, offset?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (limit !== undefined && limit !== null) {\n            queryParameters = queryParameters.set('limit', <any>limit);\n        }\n        if (offset !== undefined && offset !== null) {\n            queryParameters = queryParameters.set('offset', <any>offset);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<FulguriteModelMatchErrorList>('get',`${this.basePath}/api/v1/release/match_error`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * delete Fulgurite::Model::MatchError\n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1ReleaseMatchErrorIdDelete(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1ReleaseMatchErrorIdDelete(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1ReleaseMatchErrorIdDelete(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1ReleaseMatchErrorIdDelete(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiV1ReleaseMatchErrorIdDelete.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/api/v1/release/match_error/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * get Fulgurite::Model::MatchError\n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1ReleaseMatchErrorIdGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1ReleaseMatchErrorIdGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1ReleaseMatchErrorIdGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1ReleaseMatchErrorIdGet(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiV1ReleaseMatchErrorIdGet.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('get',`${this.basePath}/api/v1/release/match_error/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * put Fulgurite::Model::MatchError\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1ReleaseMatchErrorPut(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1ReleaseMatchErrorPut(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1ReleaseMatchErrorPut(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1ReleaseMatchErrorPut(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('put',`${this.basePath}/api/v1/release/match_error`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * get Fulgurite::Model::Nzb list\n     * \n     * @param limit \n     * @param offset \n     * @param name \n     * @param name_like \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1ReleaseNzbGet(limit?: string, offset?: string, name?: string, name_like?: string, observe?: 'body', reportProgress?: boolean): Observable<FulguriteModelNzbList>;\n    public apiV1ReleaseNzbGet(limit?: string, offset?: string, name?: string, name_like?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FulguriteModelNzbList>>;\n    public apiV1ReleaseNzbGet(limit?: string, offset?: string, name?: string, name_like?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FulguriteModelNzbList>>;\n    public apiV1ReleaseNzbGet(limit?: string, offset?: string, name?: string, name_like?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (limit !== undefined && limit !== null) {\n            queryParameters = queryParameters.set('limit', <any>limit);\n        }\n        if (offset !== undefined && offset !== null) {\n            queryParameters = queryParameters.set('offset', <any>offset);\n        }\n        if (name !== undefined && name !== null) {\n            queryParameters = queryParameters.set('name', <any>name);\n        }\n        if (name_like !== undefined && name_like !== null) {\n            queryParameters = queryParameters.set('name_like', <any>name_like);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<FulguriteModelNzbList>('get',`${this.basePath}/api/v1/release/nzb`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * delete Fulgurite::Model::Nzb\n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1ReleaseNzbIdDelete(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1ReleaseNzbIdDelete(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1ReleaseNzbIdDelete(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1ReleaseNzbIdDelete(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiV1ReleaseNzbIdDelete.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/api/v1/release/nzb/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * get Fulgurite::Model::Nzb\n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1ReleaseNzbIdGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1ReleaseNzbIdGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1ReleaseNzbIdGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1ReleaseNzbIdGet(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiV1ReleaseNzbIdGet.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('get',`${this.basePath}/api/v1/release/nzb/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * get Fulgurite::Model::Nzb\n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1ReleaseNzbIdRawGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1ReleaseNzbIdRawGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1ReleaseNzbIdRawGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1ReleaseNzbIdRawGet(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiV1ReleaseNzbIdRawGet.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('get',`${this.basePath}/api/v1/release/nzb/${encodeURIComponent(String(id))}/raw`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * put Fulgurite::Model::Nzb\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1ReleaseNzbPut(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1ReleaseNzbPut(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1ReleaseNzbPut(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1ReleaseNzbPut(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('put',`${this.basePath}/api/v1/release/nzb`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * get Fulgurite::Model::BinaryChunk list\n     * \n     * @param limit \n     * @param offset \n     * @param uuid \n     * @param usenet_binary_part_uuid \n     * @param usenet_group_uuid \n     * @param num \n     * @param message_id \n     * @param chunk \n     * @param poster \n     * @param subject \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1UsenetBinaryChunkGet(limit?: string, offset?: string, uuid?: string, usenet_binary_part_uuid?: string, usenet_group_uuid?: string, num?: string, message_id?: string, chunk?: string, poster?: string, subject?: string, observe?: 'body', reportProgress?: boolean): Observable<FulguriteModelBinaryChunkList>;\n    public apiV1UsenetBinaryChunkGet(limit?: string, offset?: string, uuid?: string, usenet_binary_part_uuid?: string, usenet_group_uuid?: string, num?: string, message_id?: string, chunk?: string, poster?: string, subject?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FulguriteModelBinaryChunkList>>;\n    public apiV1UsenetBinaryChunkGet(limit?: string, offset?: string, uuid?: string, usenet_binary_part_uuid?: string, usenet_group_uuid?: string, num?: string, message_id?: string, chunk?: string, poster?: string, subject?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FulguriteModelBinaryChunkList>>;\n    public apiV1UsenetBinaryChunkGet(limit?: string, offset?: string, uuid?: string, usenet_binary_part_uuid?: string, usenet_group_uuid?: string, num?: string, message_id?: string, chunk?: string, poster?: string, subject?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n\n\n\n\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (limit !== undefined && limit !== null) {\n            queryParameters = queryParameters.set('limit', <any>limit);\n        }\n        if (offset !== undefined && offset !== null) {\n            queryParameters = queryParameters.set('offset', <any>offset);\n        }\n        if (uuid !== undefined && uuid !== null) {\n            queryParameters = queryParameters.set('uuid', <any>uuid);\n        }\n        if (usenet_binary_part_uuid !== undefined && usenet_binary_part_uuid !== null) {\n            queryParameters = queryParameters.set('usenet_binary_part_uuid', <any>usenet_binary_part_uuid);\n        }\n        if (usenet_group_uuid !== undefined && usenet_group_uuid !== null) {\n            queryParameters = queryParameters.set('usenet_group_uuid', <any>usenet_group_uuid);\n        }\n        if (num !== undefined && num !== null) {\n            queryParameters = queryParameters.set('num', <any>num);\n        }\n        if (message_id !== undefined && message_id !== null) {\n            queryParameters = queryParameters.set('message_id', <any>message_id);\n        }\n        if (chunk !== undefined && chunk !== null) {\n            queryParameters = queryParameters.set('chunk', <any>chunk);\n        }\n        if (poster !== undefined && poster !== null) {\n            queryParameters = queryParameters.set('poster', <any>poster);\n        }\n        if (subject !== undefined && subject !== null) {\n            queryParameters = queryParameters.set('subject', <any>subject);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<FulguriteModelBinaryChunkList>('get',`${this.basePath}/api/v1/usenet/binary/chunk`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * delete Fulgurite::Model::BinaryChunk\n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1UsenetBinaryChunkIdDelete(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1UsenetBinaryChunkIdDelete(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1UsenetBinaryChunkIdDelete(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1UsenetBinaryChunkIdDelete(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiV1UsenetBinaryChunkIdDelete.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/api/v1/usenet/binary/chunk/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * get Fulgurite::Model::BinaryChunk\n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1UsenetBinaryChunkIdGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1UsenetBinaryChunkIdGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1UsenetBinaryChunkIdGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1UsenetBinaryChunkIdGet(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiV1UsenetBinaryChunkIdGet.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('get',`${this.basePath}/api/v1/usenet/binary/chunk/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * put Fulgurite::Model::BinaryChunk\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1UsenetBinaryChunkPut(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1UsenetBinaryChunkPut(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1UsenetBinaryChunkPut(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1UsenetBinaryChunkPut(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('put',`${this.basePath}/api/v1/usenet/binary/chunk`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * get Fulgurite::Model::Binary list\n     * \n     * @param limit \n     * @param offset \n     * @param uuid \n     * @param name \n     * @param name_like \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1UsenetBinaryGet(limit?: string, offset?: string, uuid?: string, name?: string, name_like?: string, observe?: 'body', reportProgress?: boolean): Observable<FulguriteModelBinaryList>;\n    public apiV1UsenetBinaryGet(limit?: string, offset?: string, uuid?: string, name?: string, name_like?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FulguriteModelBinaryList>>;\n    public apiV1UsenetBinaryGet(limit?: string, offset?: string, uuid?: string, name?: string, name_like?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FulguriteModelBinaryList>>;\n    public apiV1UsenetBinaryGet(limit?: string, offset?: string, uuid?: string, name?: string, name_like?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (limit !== undefined && limit !== null) {\n            queryParameters = queryParameters.set('limit', <any>limit);\n        }\n        if (offset !== undefined && offset !== null) {\n            queryParameters = queryParameters.set('offset', <any>offset);\n        }\n        if (uuid !== undefined && uuid !== null) {\n            queryParameters = queryParameters.set('uuid', <any>uuid);\n        }\n        if (name !== undefined && name !== null) {\n            queryParameters = queryParameters.set('name', <any>name);\n        }\n        if (name_like !== undefined && name_like !== null) {\n            queryParameters = queryParameters.set('name_like', <any>name_like);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<FulguriteModelBinaryList>('get',`${this.basePath}/api/v1/usenet/binary`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * delete Fulgurite::Model::Binary\n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1UsenetBinaryIdDelete(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1UsenetBinaryIdDelete(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1UsenetBinaryIdDelete(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1UsenetBinaryIdDelete(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiV1UsenetBinaryIdDelete.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/api/v1/usenet/binary/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * get Fulgurite::Model::Binary\n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1UsenetBinaryIdGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1UsenetBinaryIdGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1UsenetBinaryIdGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1UsenetBinaryIdGet(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiV1UsenetBinaryIdGet.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('get',`${this.basePath}/api/v1/usenet/binary/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * get Fulgurite::Model::BinaryPart list\n     * \n     * @param id \n     * @param limit \n     * @param offset \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1UsenetBinaryIdPartsGet(id: string, limit?: string, offset?: string, observe?: 'body', reportProgress?: boolean): Observable<FulguriteModelBinaryPartList>;\n    public apiV1UsenetBinaryIdPartsGet(id: string, limit?: string, offset?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FulguriteModelBinaryPartList>>;\n    public apiV1UsenetBinaryIdPartsGet(id: string, limit?: string, offset?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FulguriteModelBinaryPartList>>;\n    public apiV1UsenetBinaryIdPartsGet(id: string, limit?: string, offset?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiV1UsenetBinaryIdPartsGet.');\n        }\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (limit !== undefined && limit !== null) {\n            queryParameters = queryParameters.set('limit', <any>limit);\n        }\n        if (offset !== undefined && offset !== null) {\n            queryParameters = queryParameters.set('offset', <any>offset);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<FulguriteModelBinaryPartList>('get',`${this.basePath}/api/v1/usenet/binary/${encodeURIComponent(String(id))}/parts`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * get Fulgurite::Model::BinaryPart list\n     * \n     * @param limit \n     * @param offset \n     * @param uuid \n     * @param usenet_binary_uuid \n     * @param file \n     * @param file_like \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1UsenetBinaryPartGet(limit?: string, offset?: string, uuid?: string, usenet_binary_uuid?: string, file?: string, file_like?: string, observe?: 'body', reportProgress?: boolean): Observable<FulguriteModelBinaryPartList>;\n    public apiV1UsenetBinaryPartGet(limit?: string, offset?: string, uuid?: string, usenet_binary_uuid?: string, file?: string, file_like?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FulguriteModelBinaryPartList>>;\n    public apiV1UsenetBinaryPartGet(limit?: string, offset?: string, uuid?: string, usenet_binary_uuid?: string, file?: string, file_like?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FulguriteModelBinaryPartList>>;\n    public apiV1UsenetBinaryPartGet(limit?: string, offset?: string, uuid?: string, usenet_binary_uuid?: string, file?: string, file_like?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (limit !== undefined && limit !== null) {\n            queryParameters = queryParameters.set('limit', <any>limit);\n        }\n        if (offset !== undefined && offset !== null) {\n            queryParameters = queryParameters.set('offset', <any>offset);\n        }\n        if (uuid !== undefined && uuid !== null) {\n            queryParameters = queryParameters.set('uuid', <any>uuid);\n        }\n        if (usenet_binary_uuid !== undefined && usenet_binary_uuid !== null) {\n            queryParameters = queryParameters.set('usenet_binary_uuid', <any>usenet_binary_uuid);\n        }\n        if (file !== undefined && file !== null) {\n            queryParameters = queryParameters.set('file', <any>file);\n        }\n        if (file_like !== undefined && file_like !== null) {\n            queryParameters = queryParameters.set('file_like', <any>file_like);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<FulguriteModelBinaryPartList>('get',`${this.basePath}/api/v1/usenet/binary/part`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * get Fulgurite::Model::BinaryChunk list\n     * \n     * @param id \n     * @param limit \n     * @param offset \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1UsenetBinaryPartIdChunksGet(id: string, limit?: string, offset?: string, observe?: 'body', reportProgress?: boolean): Observable<FulguriteModelBinaryChunkList>;\n    public apiV1UsenetBinaryPartIdChunksGet(id: string, limit?: string, offset?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FulguriteModelBinaryChunkList>>;\n    public apiV1UsenetBinaryPartIdChunksGet(id: string, limit?: string, offset?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FulguriteModelBinaryChunkList>>;\n    public apiV1UsenetBinaryPartIdChunksGet(id: string, limit?: string, offset?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiV1UsenetBinaryPartIdChunksGet.');\n        }\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (limit !== undefined && limit !== null) {\n            queryParameters = queryParameters.set('limit', <any>limit);\n        }\n        if (offset !== undefined && offset !== null) {\n            queryParameters = queryParameters.set('offset', <any>offset);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<FulguriteModelBinaryChunkList>('get',`${this.basePath}/api/v1/usenet/binary/part/${encodeURIComponent(String(id))}/chunks`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * delete Fulgurite::Model::BinaryPart\n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1UsenetBinaryPartIdDelete(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1UsenetBinaryPartIdDelete(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1UsenetBinaryPartIdDelete(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1UsenetBinaryPartIdDelete(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiV1UsenetBinaryPartIdDelete.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/api/v1/usenet/binary/part/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * get Fulgurite::Model::BinaryPart\n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1UsenetBinaryPartIdGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1UsenetBinaryPartIdGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1UsenetBinaryPartIdGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1UsenetBinaryPartIdGet(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiV1UsenetBinaryPartIdGet.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('get',`${this.basePath}/api/v1/usenet/binary/part/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * put Fulgurite::Model::BinaryPart\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1UsenetBinaryPartPut(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1UsenetBinaryPartPut(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1UsenetBinaryPartPut(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1UsenetBinaryPartPut(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('put',`${this.basePath}/api/v1/usenet/binary/part`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * put Fulgurite::Model::Binary\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1UsenetBinaryPut(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1UsenetBinaryPut(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1UsenetBinaryPut(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1UsenetBinaryPut(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('put',`${this.basePath}/api/v1/usenet/binary`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * get Fulgurite::Usenet::Group list\n     * \n     * @param limit \n     * @param offset \n     * @param uuid \n     * @param usenet_provider_uuid \n     * @param name \n     * @param name_like \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1UsenetGroupGet(limit?: string, offset?: string, uuid?: string, usenet_provider_uuid?: string, name?: string, name_like?: string, observe?: 'body', reportProgress?: boolean): Observable<FulguriteUsenetGroupList>;\n    public apiV1UsenetGroupGet(limit?: string, offset?: string, uuid?: string, usenet_provider_uuid?: string, name?: string, name_like?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FulguriteUsenetGroupList>>;\n    public apiV1UsenetGroupGet(limit?: string, offset?: string, uuid?: string, usenet_provider_uuid?: string, name?: string, name_like?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FulguriteUsenetGroupList>>;\n    public apiV1UsenetGroupGet(limit?: string, offset?: string, uuid?: string, usenet_provider_uuid?: string, name?: string, name_like?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (limit !== undefined && limit !== null) {\n            queryParameters = queryParameters.set('limit', <any>limit);\n        }\n        if (offset !== undefined && offset !== null) {\n            queryParameters = queryParameters.set('offset', <any>offset);\n        }\n        if (uuid !== undefined && uuid !== null) {\n            queryParameters = queryParameters.set('uuid', <any>uuid);\n        }\n        if (usenet_provider_uuid !== undefined && usenet_provider_uuid !== null) {\n            queryParameters = queryParameters.set('usenet_provider_uuid', <any>usenet_provider_uuid);\n        }\n        if (name !== undefined && name !== null) {\n            queryParameters = queryParameters.set('name', <any>name);\n        }\n        if (name_like !== undefined && name_like !== null) {\n            queryParameters = queryParameters.set('name_like', <any>name_like);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<FulguriteUsenetGroupList>('get',`${this.basePath}/api/v1/usenet/group`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * delete Fulgurite::Usenet::Group\n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1UsenetGroupIdDelete(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1UsenetGroupIdDelete(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1UsenetGroupIdDelete(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1UsenetGroupIdDelete(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiV1UsenetGroupIdDelete.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/api/v1/usenet/group/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * get Fulgurite::Usenet::Group\n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1UsenetGroupIdGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1UsenetGroupIdGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1UsenetGroupIdGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1UsenetGroupIdGet(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiV1UsenetGroupIdGet.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('get',`${this.basePath}/api/v1/usenet/group/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * put Fulgurite::Usenet::Group\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1UsenetGroupPut(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1UsenetGroupPut(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1UsenetGroupPut(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1UsenetGroupPut(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('put',`${this.basePath}/api/v1/usenet/group`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * get Fulgurite::Usenet::Provider list\n     * \n     * @param limit \n     * @param offset \n     * @param uuid \n     * @param name \n     * @param name_like \n     * @param active \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1UsenetProviderGet(limit?: string, offset?: string, uuid?: string, name?: string, name_like?: string, active?: string, observe?: 'body', reportProgress?: boolean): Observable<FulguriteUsenetProviderList>;\n    public apiV1UsenetProviderGet(limit?: string, offset?: string, uuid?: string, name?: string, name_like?: string, active?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FulguriteUsenetProviderList>>;\n    public apiV1UsenetProviderGet(limit?: string, offset?: string, uuid?: string, name?: string, name_like?: string, active?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FulguriteUsenetProviderList>>;\n    public apiV1UsenetProviderGet(limit?: string, offset?: string, uuid?: string, name?: string, name_like?: string, active?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n\n\n\n\n\n\n        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});\n        if (limit !== undefined && limit !== null) {\n            queryParameters = queryParameters.set('limit', <any>limit);\n        }\n        if (offset !== undefined && offset !== null) {\n            queryParameters = queryParameters.set('offset', <any>offset);\n        }\n        if (uuid !== undefined && uuid !== null) {\n            queryParameters = queryParameters.set('uuid', <any>uuid);\n        }\n        if (name !== undefined && name !== null) {\n            queryParameters = queryParameters.set('name', <any>name);\n        }\n        if (name_like !== undefined && name_like !== null) {\n            queryParameters = queryParameters.set('name_like', <any>name_like);\n        }\n        if (active !== undefined && active !== null) {\n            queryParameters = queryParameters.set('active', <any>active);\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<FulguriteUsenetProviderList>('get',`${this.basePath}/api/v1/usenet/provider`,\n            {\n                params: queryParameters,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * delete Fulgurite::Usenet::Provider\n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1UsenetProviderIdDelete(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1UsenetProviderIdDelete(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1UsenetProviderIdDelete(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1UsenetProviderIdDelete(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiV1UsenetProviderIdDelete.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('delete',`${this.basePath}/api/v1/usenet/provider/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * get Fulgurite::Usenet::Provider\n     * \n     * @param id \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1UsenetProviderIdGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1UsenetProviderIdGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1UsenetProviderIdGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1UsenetProviderIdGet(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        if (id === null || id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling apiV1UsenetProviderIdGet.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('get',`${this.basePath}/api/v1/usenet/provider/${encodeURIComponent(String(id))}`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * put Fulgurite::Usenet::Provider\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public apiV1UsenetProviderPut(observe?: 'body', reportProgress?: boolean): Observable<any>;\n    public apiV1UsenetProviderPut(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;\n    public apiV1UsenetProviderPut(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;\n    public apiV1UsenetProviderPut(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<any>('put',`${this.basePath}/api/v1/usenet/provider`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * get nil\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public healthzGet(observe?: 'body', reportProgress?: boolean): Observable<InlineResponse200>;\n    public healthzGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse200>>;\n    public healthzGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse200>>;\n    public healthzGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<InlineResponse200>('get',`${this.basePath}/healthz`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    /**\n     * options nil\n     * \n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public options(observe?: 'body', reportProgress?: boolean): Observable<InlineResponse2001>;\n    public options(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse2001>>;\n    public options(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse2001>>;\n    public options(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {\n\n        let headers = this.defaultHeaders;\n\n        // to determine the Accept header\n        let httpHeaderAccepts: string[] = [\n            'application/json'\n        ];\n        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        if (httpHeaderAcceptSelected != undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n        ];\n\n        return this.httpClient.request<InlineResponse2001>('options',`${this.basePath}/*`,\n            {\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n}\n","export * from './default.service';\nimport { DefaultService } from './default.service';\nexport const APIS = [DefaultService];\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { Configuration } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\n\nimport { DefaultService } from './api/default.service';\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers: [\n    DefaultService ]\n})\nexport class ApiModule {\n    public static forRoot(configurationFactory: () => Configuration): ModuleWithProviders {\n        return {\n            ngModule: ApiModule,\n            providers: [ { provide: Configuration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: ApiModule,\n                 @Optional() http: HttpClient) {\n        if (parentModule) {\n            throw new Error('ApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n    }\n}\n"]}