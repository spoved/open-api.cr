/**
 * Fulgurite API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */ 
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FulguriteModelBinaryChunkList } from '../model/fulguriteModelBinaryChunkList';
import { FulguriteModelBinaryList } from '../model/fulguriteModelBinaryList';
import { FulguriteModelBinaryPartList } from '../model/fulguriteModelBinaryPartList';
import { FulguriteModelJobList } from '../model/fulguriteModelJobList';
import { FulguriteModelMatchErrorList } from '../model/fulguriteModelMatchErrorList';
import { FulguriteModelNzbList } from '../model/fulguriteModelNzbList';
import { FulguriteUsenetGroupList } from '../model/fulguriteUsenetGroupList';
import { FulguriteUsenetProviderList } from '../model/fulguriteUsenetProviderList';
import { InlineResponse200 } from '../model/inlineResponse200';
import { InlineResponse2001 } from '../model/inlineResponse2001';
import { Configuration } from '../configuration';
export declare class DefaultService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     * get Fulgurite::Model::Nzb
     *
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1DownloadNzbIdGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    apiV1DownloadNzbIdGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    apiV1DownloadNzbIdGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * get Fulgurite::Model::Job list
     *
     * @param limit
     * @param offset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1JobGet(limit?: string, offset?: string, observe?: 'body', reportProgress?: boolean): Observable<FulguriteModelJobList>;
    apiV1JobGet(limit?: string, offset?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FulguriteModelJobList>>;
    apiV1JobGet(limit?: string, offset?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FulguriteModelJobList>>;
    /**
     * delete Fulgurite::Model::Job
     *
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1JobIdDelete(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    apiV1JobIdDelete(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    apiV1JobIdDelete(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * get Fulgurite::Model::Job
     *
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1JobIdGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    apiV1JobIdGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    apiV1JobIdGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * put Fulgurite::Model::Job
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1JobPut(observe?: 'body', reportProgress?: boolean): Observable<any>;
    apiV1JobPut(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    apiV1JobPut(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * get Fulgurite::Model::MatchError list
     *
     * @param limit
     * @param offset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1ReleaseMatchErrorGet(limit?: string, offset?: string, observe?: 'body', reportProgress?: boolean): Observable<FulguriteModelMatchErrorList>;
    apiV1ReleaseMatchErrorGet(limit?: string, offset?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FulguriteModelMatchErrorList>>;
    apiV1ReleaseMatchErrorGet(limit?: string, offset?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FulguriteModelMatchErrorList>>;
    /**
     * delete Fulgurite::Model::MatchError
     *
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1ReleaseMatchErrorIdDelete(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    apiV1ReleaseMatchErrorIdDelete(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    apiV1ReleaseMatchErrorIdDelete(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * get Fulgurite::Model::MatchError
     *
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1ReleaseMatchErrorIdGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    apiV1ReleaseMatchErrorIdGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    apiV1ReleaseMatchErrorIdGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * put Fulgurite::Model::MatchError
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1ReleaseMatchErrorPut(observe?: 'body', reportProgress?: boolean): Observable<any>;
    apiV1ReleaseMatchErrorPut(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    apiV1ReleaseMatchErrorPut(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * get Fulgurite::Model::Nzb list
     *
     * @param limit
     * @param offset
     * @param name
     * @param name_like
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1ReleaseNzbGet(limit?: string, offset?: string, name?: string, name_like?: string, observe?: 'body', reportProgress?: boolean): Observable<FulguriteModelNzbList>;
    apiV1ReleaseNzbGet(limit?: string, offset?: string, name?: string, name_like?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FulguriteModelNzbList>>;
    apiV1ReleaseNzbGet(limit?: string, offset?: string, name?: string, name_like?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FulguriteModelNzbList>>;
    /**
     * delete Fulgurite::Model::Nzb
     *
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1ReleaseNzbIdDelete(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    apiV1ReleaseNzbIdDelete(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    apiV1ReleaseNzbIdDelete(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * get Fulgurite::Model::Nzb
     *
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1ReleaseNzbIdGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    apiV1ReleaseNzbIdGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    apiV1ReleaseNzbIdGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * get Fulgurite::Model::Nzb
     *
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1ReleaseNzbIdRawGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    apiV1ReleaseNzbIdRawGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    apiV1ReleaseNzbIdRawGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * put Fulgurite::Model::Nzb
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1ReleaseNzbPut(observe?: 'body', reportProgress?: boolean): Observable<any>;
    apiV1ReleaseNzbPut(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    apiV1ReleaseNzbPut(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * get Fulgurite::Model::BinaryChunk list
     *
     * @param limit
     * @param offset
     * @param uuid
     * @param usenet_binary_part_uuid
     * @param usenet_group_uuid
     * @param num
     * @param message_id
     * @param chunk
     * @param poster
     * @param subject
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1UsenetBinaryChunkGet(limit?: string, offset?: string, uuid?: string, usenet_binary_part_uuid?: string, usenet_group_uuid?: string, num?: string, message_id?: string, chunk?: string, poster?: string, subject?: string, observe?: 'body', reportProgress?: boolean): Observable<FulguriteModelBinaryChunkList>;
    apiV1UsenetBinaryChunkGet(limit?: string, offset?: string, uuid?: string, usenet_binary_part_uuid?: string, usenet_group_uuid?: string, num?: string, message_id?: string, chunk?: string, poster?: string, subject?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FulguriteModelBinaryChunkList>>;
    apiV1UsenetBinaryChunkGet(limit?: string, offset?: string, uuid?: string, usenet_binary_part_uuid?: string, usenet_group_uuid?: string, num?: string, message_id?: string, chunk?: string, poster?: string, subject?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FulguriteModelBinaryChunkList>>;
    /**
     * delete Fulgurite::Model::BinaryChunk
     *
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1UsenetBinaryChunkIdDelete(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    apiV1UsenetBinaryChunkIdDelete(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    apiV1UsenetBinaryChunkIdDelete(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * get Fulgurite::Model::BinaryChunk
     *
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1UsenetBinaryChunkIdGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    apiV1UsenetBinaryChunkIdGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    apiV1UsenetBinaryChunkIdGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * put Fulgurite::Model::BinaryChunk
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1UsenetBinaryChunkPut(observe?: 'body', reportProgress?: boolean): Observable<any>;
    apiV1UsenetBinaryChunkPut(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    apiV1UsenetBinaryChunkPut(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * get Fulgurite::Model::Binary list
     *
     * @param limit
     * @param offset
     * @param uuid
     * @param name
     * @param name_like
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1UsenetBinaryGet(limit?: string, offset?: string, uuid?: string, name?: string, name_like?: string, observe?: 'body', reportProgress?: boolean): Observable<FulguriteModelBinaryList>;
    apiV1UsenetBinaryGet(limit?: string, offset?: string, uuid?: string, name?: string, name_like?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FulguriteModelBinaryList>>;
    apiV1UsenetBinaryGet(limit?: string, offset?: string, uuid?: string, name?: string, name_like?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FulguriteModelBinaryList>>;
    /**
     * delete Fulgurite::Model::Binary
     *
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1UsenetBinaryIdDelete(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    apiV1UsenetBinaryIdDelete(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    apiV1UsenetBinaryIdDelete(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * get Fulgurite::Model::Binary
     *
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1UsenetBinaryIdGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    apiV1UsenetBinaryIdGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    apiV1UsenetBinaryIdGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * get Fulgurite::Model::BinaryPart list
     *
     * @param id
     * @param limit
     * @param offset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1UsenetBinaryIdPartsGet(id: string, limit?: string, offset?: string, observe?: 'body', reportProgress?: boolean): Observable<FulguriteModelBinaryPartList>;
    apiV1UsenetBinaryIdPartsGet(id: string, limit?: string, offset?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FulguriteModelBinaryPartList>>;
    apiV1UsenetBinaryIdPartsGet(id: string, limit?: string, offset?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FulguriteModelBinaryPartList>>;
    /**
     * get Fulgurite::Model::BinaryPart list
     *
     * @param limit
     * @param offset
     * @param uuid
     * @param usenet_binary_uuid
     * @param file
     * @param file_like
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1UsenetBinaryPartGet(limit?: string, offset?: string, uuid?: string, usenet_binary_uuid?: string, file?: string, file_like?: string, observe?: 'body', reportProgress?: boolean): Observable<FulguriteModelBinaryPartList>;
    apiV1UsenetBinaryPartGet(limit?: string, offset?: string, uuid?: string, usenet_binary_uuid?: string, file?: string, file_like?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FulguriteModelBinaryPartList>>;
    apiV1UsenetBinaryPartGet(limit?: string, offset?: string, uuid?: string, usenet_binary_uuid?: string, file?: string, file_like?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FulguriteModelBinaryPartList>>;
    /**
     * get Fulgurite::Model::BinaryChunk list
     *
     * @param id
     * @param limit
     * @param offset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1UsenetBinaryPartIdChunksGet(id: string, limit?: string, offset?: string, observe?: 'body', reportProgress?: boolean): Observable<FulguriteModelBinaryChunkList>;
    apiV1UsenetBinaryPartIdChunksGet(id: string, limit?: string, offset?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FulguriteModelBinaryChunkList>>;
    apiV1UsenetBinaryPartIdChunksGet(id: string, limit?: string, offset?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FulguriteModelBinaryChunkList>>;
    /**
     * delete Fulgurite::Model::BinaryPart
     *
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1UsenetBinaryPartIdDelete(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    apiV1UsenetBinaryPartIdDelete(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    apiV1UsenetBinaryPartIdDelete(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * get Fulgurite::Model::BinaryPart
     *
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1UsenetBinaryPartIdGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    apiV1UsenetBinaryPartIdGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    apiV1UsenetBinaryPartIdGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * put Fulgurite::Model::BinaryPart
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1UsenetBinaryPartPut(observe?: 'body', reportProgress?: boolean): Observable<any>;
    apiV1UsenetBinaryPartPut(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    apiV1UsenetBinaryPartPut(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * put Fulgurite::Model::Binary
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1UsenetBinaryPut(observe?: 'body', reportProgress?: boolean): Observable<any>;
    apiV1UsenetBinaryPut(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    apiV1UsenetBinaryPut(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * get Fulgurite::Usenet::Group list
     *
     * @param limit
     * @param offset
     * @param uuid
     * @param usenet_provider_uuid
     * @param name
     * @param name_like
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1UsenetGroupGet(limit?: string, offset?: string, uuid?: string, usenet_provider_uuid?: string, name?: string, name_like?: string, observe?: 'body', reportProgress?: boolean): Observable<FulguriteUsenetGroupList>;
    apiV1UsenetGroupGet(limit?: string, offset?: string, uuid?: string, usenet_provider_uuid?: string, name?: string, name_like?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FulguriteUsenetGroupList>>;
    apiV1UsenetGroupGet(limit?: string, offset?: string, uuid?: string, usenet_provider_uuid?: string, name?: string, name_like?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FulguriteUsenetGroupList>>;
    /**
     * delete Fulgurite::Usenet::Group
     *
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1UsenetGroupIdDelete(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    apiV1UsenetGroupIdDelete(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    apiV1UsenetGroupIdDelete(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * get Fulgurite::Usenet::Group
     *
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1UsenetGroupIdGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    apiV1UsenetGroupIdGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    apiV1UsenetGroupIdGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * put Fulgurite::Usenet::Group
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1UsenetGroupPut(observe?: 'body', reportProgress?: boolean): Observable<any>;
    apiV1UsenetGroupPut(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    apiV1UsenetGroupPut(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * get Fulgurite::Usenet::Provider list
     *
     * @param limit
     * @param offset
     * @param uuid
     * @param name
     * @param name_like
     * @param active
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1UsenetProviderGet(limit?: string, offset?: string, uuid?: string, name?: string, name_like?: string, active?: string, observe?: 'body', reportProgress?: boolean): Observable<FulguriteUsenetProviderList>;
    apiV1UsenetProviderGet(limit?: string, offset?: string, uuid?: string, name?: string, name_like?: string, active?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<FulguriteUsenetProviderList>>;
    apiV1UsenetProviderGet(limit?: string, offset?: string, uuid?: string, name?: string, name_like?: string, active?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<FulguriteUsenetProviderList>>;
    /**
     * delete Fulgurite::Usenet::Provider
     *
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1UsenetProviderIdDelete(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    apiV1UsenetProviderIdDelete(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    apiV1UsenetProviderIdDelete(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * get Fulgurite::Usenet::Provider
     *
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1UsenetProviderIdGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    apiV1UsenetProviderIdGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    apiV1UsenetProviderIdGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * put Fulgurite::Usenet::Provider
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    apiV1UsenetProviderPut(observe?: 'body', reportProgress?: boolean): Observable<any>;
    apiV1UsenetProviderPut(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    apiV1UsenetProviderPut(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    /**
     * get nil
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    healthzGet(observe?: 'body', reportProgress?: boolean): Observable<InlineResponse200>;
    healthzGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse200>>;
    healthzGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse200>>;
    /**
     * options nil
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    options(observe?: 'body', reportProgress?: boolean): Observable<InlineResponse2001>;
    options(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse2001>>;
    options(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse2001>>;
}
