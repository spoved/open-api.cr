class Open::Api
  abstract struct SecurityScheme
    include JSON::Serializable
    include YAML::Serializable

    @[JSON::Field(key: "type")]
    @[YAML::Field(key: "type")]
    getter auth_type : String
    property description : String? = nil

    struct ApiKeyAuth < SecurityScheme
      include JSON::Serializable
      include YAML::Serializable
      @auth_type = "apiKey"

      # REQUIRED. The name of the header, query or cookie parameter to be used.
      property name : String

      @[JSON::Field(key: "in")]
      @[YAML::Field(key: "in")]
      # REQUIRED. The location of the API key. Valid values are "query", "header" or "cookie".
      property api_key_in : String

      def initialize(@name : String, @api_key_in : String = "header", @description : String? = nil); end

      def self.jwt_bearer
        ApiKeyAuth.new(
          name: "Authorization",
          api_key_in: "header",
          description: <<-END
            For accessing the API a valid JWT token must be passed in all the queries in
            the 'Authorization' header.

            A valid JWT token is generated by the API and retourned as answer of a call
            to the route /login giving a valid user & password.

            The following syntax must be used in the 'Authorization' header :

                Bearer xxxxxx.yyyyyyy.zzzzzz
            END
        )
      end
    end

    abstract struct HTTPAuth < SecurityScheme
      @auth_type = "http"

      struct Basic < HTTPAuth
        getter scheme : String = "basic"

        def initialize(@description : String? = nil); end
      end

      struct Bearer < HTTPAuth
        @auth_type = "http"
        getter scheme : String = "bearer"

        @[JSON::Field(key: "bearerFormat")]
        @[YAML::Field(key: "bearerFormat")]
        # A hint to the client to identify how the bearer token is formatted. Bearer tokens are usually generated by an authorization server, so this information is primarily for documentation purposes.
        getter bearer_format : String

        def initialize(@bearer_format : String, @description : String? = nil); end

        def self.jwt
          Bearer.new("JWT")
        end
      end
    end

    struct OAuth2 < SecurityScheme
      include JSON::Serializable
      include YAML::Serializable
      @auth_type = "oauth2"

      # REQUIRED. An object containing configuration information for the flow types supported.
      getter flows : Flows

      def initialize(@flows : Flows, @description : String? = nil); end

      struct Flows
        include JSON::Serializable
        include YAML::Serializable

        getter implicit : FlowObject? = nil
        getter pasword : FlowObject? = nil

        @[JSON::Field(key: "clientCredentials")]
        @[YAML::Field(key: "clientCredentials")]
        getter client_credentials : FlowObject? = nil
        @[JSON::Field(key: "authorizationCode")]
        @[YAML::Field(key: "authorizationCode")]
        getter authorization_code : FlowObject? = nil

        def initialize(@authorization_code); end
      end

      struct FlowObject
        include JSON::Serializable
        include YAML::Serializable

        @[JSON::Field(key: "authorizationUrl")]
        @[YAML::Field(key: "authorizationUrl")]
        getter authorization_url : String
        @[JSON::Field(key: "tokenUrl")]
        @[YAML::Field(key: "tokenUrl")]
        getter token_url : String
        @[JSON::Field(key: "refreshUrl")]
        @[YAML::Field(key: "refreshUrl")]
        getter refresh_url : String? = nil
        getter scopes : Hash(String, String)

        def initialize(@authorization_url, @token_url, @scopes, @refresh_url = nil); end
      end
    end

    struct OpenId < SecurityScheme
      include JSON::Serializable
      include YAML::Serializable
      @auth_type = "openIdConnect"
      @[JSON::Field(key: "openIdConnectUrl")]
      @[YAML::Field(key: "openIdConnectUrl")]
      getter open_id_connect_url : String

      def initialize(@open_id_connect_url : String, @description : String? = nil); end
    end
  end
end
